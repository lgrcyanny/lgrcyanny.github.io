<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CyannyLive</title>
  <subtitle>AI and Big Data</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-28T12:32:12.963Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cyanny Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dynamic Programming Summary</title>
    <link href="http://example.com/2021/12/23/dynamic-programming-summary/"/>
    <id>http://example.com/2021/12/23/dynamic-programming-summary/</id>
    <published>2021-12-23T03:11:31.000Z</published>
    <updated>2021-12-28T12:32:12.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-动态规划之道"><a href="#1-动态规划之道" class="headerlink" title="1. 动态规划之道"></a>1. 动态规划之道</h1><ul>
<li><strong>DP问题的特征</strong><ul>
<li>最优子结构: 原问题是一个最优化问题, 可递归地拆分为多个子问题, 通过数学方法组合各个子问题的最优解, 可以求得问题的最优解</li>
<li>重叠的子问题: 子问题相互重叠, 例如斐波拉契数列问题, 而子问题如果不重叠, 可以用一般的递归</li>
<li>无后效性: 某一个状态一旦确定, 就不受这个状态以后决策的影响, 例如地下城游戏<a id="more"></a></li>
</ul>
</li>
<li><strong>DP解题思路</strong><ul>
<li>状态定义, 即定义子问题, 弄清楚原问题和子问题的关系, 例如dp[n], 表示0..n上问题的解, 可以考虑缩减问题规模</li>
<li>状态转移, 即定义子问题之间的转换关系, 写出状态转移方程, 例如dp[i] = f(dp[i - 1]), i &lt; n</li>
<li>子问题相互重叠, 自底向上, 利用存储表, 一般是一维或二维数组, 如果数组稀疏, 可以用HashMap</li>
<li>注意初始化和边界条件</li>
</ul>
</li>
<li><strong>DP与其他算法的区别</strong><ul>
<li>DP与分治算法: 分治算法不要求子问题相互重叠</li>
<li>DP与贪心算法<ul>
<li>贪心要求最优子结构, 每一步的最优解包括上一步的最优解, 每次只求解一个最优子问题</li>
<li>贪心不保证全局最优, DP保证</li>
</ul>
</li>
</ul>
</li>
<li><strong>DP问题类型: 按结果类型分类</strong><ul>
<li>最值问题: 求最大值, 最小值</li>
<li>计数问题: 求组合总数, 路径总数等</li>
</ul>
</li>
<li><strong>DP问题类型: 按状态转移方程形式分类</strong><ul>
<li>线性问题: 问题规模i从小到大, 大规模问题的解依赖小规模问题的最优解, 例如LIS, 最大子数组和</li>
<li>前缀和问题: 求区间和 sum(i, j) = sums(0, j + 1) - sums(0, j)</li>
<li>区间问题: 例如: 最长回文字符串, 最长回文子序列</li>
<li>背包问题: 0-1背包问题, 完全背包问题</li>
<li>状态压缩: 例如旅行商问题, 求经过所有点的最短路径</li>
<li>计数问题: 例如卡特兰数</li>
<li>数位问题</li>
<li>矩阵快速幂: 对于线性递归式求解, 时间复杂度可以优化到O(logN)</li>
</ul>
</li>
</ul>
<h1 id="2-动态规划经典实战"><a href="#2-动态规划经典实战" class="headerlink" title="2. 动态规划经典实战"></a>2. 动态规划经典实战</h1><h2 id="2-1-线性动态规划"><a href="#2-1-线性动态规划" class="headerlink" title="2.1 线性动态规划"></a>2.1 线性动态规划</h2><p>线性动态规划是指状态的推导按问题规模的大小从小到大, 较大问题的求解可以划分为小规模问题.<br>状态定义一般是一维数组dp[i], 状态转移会依赖O(n)个子问题或O(1)个子问题. 按问题类型分, 主要有:</p>
<ul>
<li>单串问题: 包括最长上升子序列, 最大子数组和, 打家劫舍(不相邻子序列最大和), 需要两个位置的问题, 带维度的单串问题, 股票问题(带状态的单串问题)</li>
<li>双串问题: 包括最长公共子序列, 字符串匹配(例如最短编辑距离, 通配符匹配), 带维度的双串问题</li>
<li>矩阵问题: 最小路径和, 最大正方形, 最大矩形, 矩形区域不超过K的最大数值和</li>
<li>无串线性问题: 没有显示的字符串和数组, 但可以用线性动规, 例如丑数, 完全平方数</li>
</ul>
<h3 id="2-1-1-单串问题-最长上升子序列-LIS"><a href="#2-1-1-单串问题-最长上升子序列-LIS" class="headerlink" title="2.1.1 单串问题-最长上升子序列(LIS)"></a>2.1.1 单串问题-最长上升子序列(LIS)</h3><p>状态转移依赖O(n)个子问题</p>
<ul>
<li>状态定义<br>dp[i], 表示以nums[i]结尾的最长上升子序列的长度, 最终结果为max(dp[i]), 0 &lt;= i &lt; n</li>
<li>状态转移方程<br>p[i] = max(dp[j]) + 1,  0&lt;= j &lt; i, nums[j] &lt; nums[i]</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLISLengthDP</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = arr.size</span><br><span class="line">    <span class="keyword">val</span> memo = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n) <span class="comment">// memo[i] is LIS from 0 to i</span></span><br><span class="line">    memo(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until n) &#123;</span><br><span class="line">      memo(i) = <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr(j) &lt; arr(i) &amp;&amp; memo(j) + <span class="number">1</span> &gt; memo(i)) &#123;</span><br><span class="line">          memo(i) = memo(j) + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (memo(i) &gt; maxLen) &#123;</span><br><span class="line">        maxLen = memo(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxLen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-单串问题-求具有最大和的连续子数组"><a href="#2-1-2-单串问题-求具有最大和的连续子数组" class="headerlink" title="2.1.2 单串问题-求具有最大和的连续子数组"></a>2.1.2 单串问题-求具有最大和的连续子数组</h3><p>给一个整数数组nums, 找一个具有最大和的连续子数组, 输出最大和</p>
<ul>
<li>状态定义 <ul>
<li>dp[i] 表示以nums[i]结尾的最大连续子数组和</li>
<li>整个数组的最大连续子序和即所有dp[i]的最大值, res = max(dp[i]), 0 &lt;= i &lt; n</li>
</ul>
</li>
<li>状态转移: (Kanade算法)<ul>
<li>dp[i] = max(dp[i - 1], 0) + nums[i] </li>
<li>或者 dp[i] = max(nums[i], nums[i] + dp[i - 1])</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMaxSubArr</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> maxSum = nums(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> maxEnding = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until nums.size) &#123;</span><br><span class="line">      maxEnding = <span class="type">Math</span>.max(maxEnding, <span class="number">0</span>) + nums(i)</span><br><span class="line">      <span class="keyword">if</span> (maxEnding &gt; maxSum) &#123;</span><br><span class="line">        maxSum = maxEnding</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>问题变种: 例如求循环子数组的最大和</strong><br>解法巧秒的是, 求子数组的最大和, 最小和, 最终结果为max(max_sub, all_sum - min_sub).</p>
<ul>
<li>状态定义: <ul>
<li>max_dp[i] 表示以nums[i]结尾的最大连续子数组和</li>
<li>min_dp[i] 表示以nums[i]结尾的最小连续子数组和</li>
</ul>
</li>
<li>状态转移<ul>
<li>max_dp[i] = max(max_dp[i - 1] + nums(i), nums(i))</li>
<li>in_dp[i] = min(min_dp[i - 1] + nums(i), nums(i))</li>
</ul>
</li>
<li>最终结果<ul>
<li>max_dp = max(max_dp[i]),  0 &lt;= i &lt; n</li>
<li>min_dp = min(min_dp[i]),  0 &lt;= i &lt; n</li>
<li>max(max_dp, all_sum - min_dp)<br>这里为了优化空间复杂度为O(1), 只需记录max_dp[i]的最大值和min_dp[i]的最小值</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArraySumCircular</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.size</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      nums(<span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> maxSum = nums.max</span><br><span class="line">      <span class="keyword">var</span> minSum = nums.min</span><br><span class="line">      <span class="keyword">var</span> maxEnding = <span class="number">0</span></span><br><span class="line">      <span class="keyword">var</span> minEnding = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        maxEnding = <span class="type">Math</span>.max(maxEnding + nums(i), nums(i))</span><br><span class="line">        minEnding = <span class="type">Math</span>.min(minEnding + nums(i), nums(i))</span><br><span class="line">        maxSum = <span class="type">Math</span>.max(maxSum, maxEnding)</span><br><span class="line">        minSum = <span class="type">Math</span>.min(minSum, minEnding)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">val</span> allSum = nums.sum</span><br><span class="line">      <span class="keyword">if</span> (maxSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        maxSum</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Math</span>.max(maxSum, allSum - minSum)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-单串问题-打家劫舍-不相邻子序列最大和"><a href="#2-1-3-单串问题-打家劫舍-不相邻子序列最大和" class="headerlink" title="2.1.3 单串问题-打家劫舍(不相邻子序列最大和)"></a>2.1.3 单串问题-打家劫舍(不相邻子序列最大和)</h3><p>问题是一个小偷沿途偷盗房屋, 每个房屋内有现金, 相邻房屋有警报, 不能触发报警, 求能偷到的现金的最大值. 该问题是求不连续子序列的最大值</p>
<ul>
<li>状态定义: dp[i]表示以i结尾的最大非连续子序列的和</li>
<li>状态转移: dp[i] = max(dp[i - 1], dp[i - 2] + nums(i))</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.size</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      nums(<span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> maxEnding0 = nums(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">var</span> maxEnding1 = <span class="type">Math</span>.max(nums(<span class="number">1</span>), maxEnding0)</span><br><span class="line">      <span class="keyword">var</span> maxSum = maxEnding1</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">2</span> until n) &#123;</span><br><span class="line">        <span class="keyword">val</span> t = <span class="type">Math</span>.max(maxEnding1, maxEnding0 + nums(i))</span><br><span class="line">        maxEnding0 = maxEnding1</span><br><span class="line">        maxEnding1 = t</span><br><span class="line">        maxSum = <span class="type">Math</span>.max(maxSum, t)</span><br><span class="line">      &#125;</span><br><span class="line">      maxSum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-4-单串问题-需要两个位置"><a href="#2-1-4-单串问题-需要两个位置" class="headerlink" title="2.1.4 单串问题-需要两个位置"></a>2.1.4 单串问题-需要两个位置</h3><p>求一个数组中最长斐波那契子序列的长度, 这里问题定义需要考虑两个位置</p>
<ul>
<li>状态定义 <ul>
<li>dp[i][j]表示以i, j结尾的最长斐波拉契子序列的长度</li>
</ul>
</li>
<li>状态转移<ul>
<li>dp[j][k] = dp[i][j] + 1, if A[i] + A[j] == A[k]</li>
</ul>
</li>
<li>实现细节<ul>
<li>需要用一个HashSet维护一个Arr[k] -&gt; k的索引表</li>
<li>由于dp是稀疏二维矩阵, 用hashmap替代</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestFibSubSeq</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.size</span><br><span class="line">    <span class="keyword">val</span> index = <span class="keyword">new</span> mutable.<span class="type">HashMap</span>[<span class="type">Int</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      index.put(nums(i), i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    <span class="comment">// dp as HashMap because 2-dimension array is sparse</span></span><br><span class="line">    <span class="keyword">val</span> dp = <span class="keyword">new</span> mutable.<span class="type">HashMap</span>[<span class="type">Int</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="keyword">for</span> (k &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until k) &#123;</span><br><span class="line">        <span class="comment">// test if A[k] = A[i] + A[j]</span></span><br><span class="line">        <span class="keyword">val</span> i = index.getOrElse(nums(k) - nums(j), <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; j) &#123;</span><br><span class="line">          dp(j * n + k) = dp.getOrElse(i * n + j, <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">          res = <span class="type">Math</span>.max(res, dp(j * n + k))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      res</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-5-单串问题-带维度的问题"><a href="#2-1-5-单串问题-带维度的问题" class="headerlink" title="2.1.5 单串问题-带维度的问题"></a>2.1.5 单串问题-带维度的问题</h3><p>经典的鸡蛋掉落问题, n层楼, k个鸡蛋, 求鸡蛋不碎的最少掉落次数</p>
<ul>
<li>状态定义: dp[i][k]表示层数为i,k个鸡蛋的最小操作次数</li>
<li>状态转移: 假设在第f层抛鸡蛋, 两种情况<ul>
<li>鸡蛋碎了, 剩余k-1个鸡蛋, 在f层以下下搜索, 问题转换为dp[f - 1][k - 1]</li>
<li>鸡蛋没有碎, 还是k个鸡蛋, 在f层以上搜索, 问题转换为dp[i - f][k]</li>
<li>因此, dp[i][k] = 1 + min(max(dp[f - 1][k - 1], dp[i - f][k])), 1&lt;= f &lt;= i</li>
<li>在搜索时需要用二分查找, 优化时间复杂度</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superEggDrop</span></span>(<span class="type">K</span>: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n + <span class="number">1</span>, <span class="type">K</span> + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (k &lt;- <span class="number">0</span> to <span class="type">K</span>) &#123;</span><br><span class="line">      dp(<span class="number">0</span>)(k) = <span class="number">0</span></span><br><span class="line">      dp(<span class="number">1</span>)(k) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      dp(i)(<span class="number">1</span>) = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">2</span> to n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (k &lt;- <span class="number">2</span> to <span class="type">K</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> right = i</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">          <span class="keyword">val</span> x = (left + right) / <span class="number">2</span></span><br><span class="line">          <span class="keyword">val</span> t1 = dp(x - <span class="number">1</span>)(k - <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">val</span> t2 = dp(i - x)(k)</span><br><span class="line">          <span class="keyword">if</span> (t1 &lt; t2) &#123;</span><br><span class="line">            left = x</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;</span><br><span class="line">            right = x</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = x</span><br><span class="line">            right = x</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp(i)(k) = <span class="number">1</span> + <span class="type">Math</span>.min(</span><br><span class="line">          <span class="type">Math</span>.max(dp(left - <span class="number">1</span>)(k - <span class="number">1</span>), dp(i - left)(k)),</span><br><span class="line">          <span class="type">Math</span>.max(dp(right - <span class="number">1</span>)(k - <span class="number">1</span>), dp(i - right)(k))</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(n)(<span class="type">K</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-6-单串问题-股票买卖-考虑状态"><a href="#2-1-6-单串问题-股票买卖-考虑状态" class="headerlink" title="2.1.6 单串问题-股票买卖, 考虑状态"></a>2.1.6 单串问题-股票买卖, 考虑状态</h3><p>给定一个数组, price[i]表示第i天的股票价格, 假设可以完成多笔交易, 最终获得股票的最大利润</p>
<ul>
<li>状态定义: dp[i][0] 表示第i天结束, 手里没有股票的最大收益, dp[i][1]表示第i天结束, 手里有股票的最大收益</li>
<li>状态转移<ul>
<li>dp[i][0] = max{dp[i - 1][0], dp[i - 1][1] + prices[i]}</li>
<li>dp[i][1] = max{dp[i - 1][1], dp[i - 1][0] - prices[i]}</li>
</ul>
</li>
<li>边界条件<ul>
<li>dp[0][0] = 0, dp[0][1] = -prices[0]</li>
</ul>
</li>
<li>计算优化<ul>
<li>由于只依赖前一个值dp[i-1], 因此只需要保存两个变量dp0, dp1</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span></span>(prices: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = prices.size</span><br><span class="line">    <span class="keyword">var</span> dp0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> dp1 = -prices(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until n) &#123;</span><br><span class="line">      dp0 = <span class="type">Math</span>.max(dp0, dp1 + prices(i))</span><br><span class="line">      dp1 = <span class="type">Math</span>.max(dp1, dp0 - prices(i))</span><br><span class="line">    &#125;</span><br><span class="line">    dp0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-7-双串问题-最长公共子序列-LCS"><a href="#2-1-7-双串问题-最长公共子序列-LCS" class="headerlink" title="2.1.7 双串问题-最长公共子序列(LCS)"></a>2.1.7 双串问题-最长公共子序列(LCS)</h3><ul>
<li>状态定义: dp[i][j]表示字符串text1 = 0..i和字符串text2=0..j的最大公共子序列长度</li>
<li>状态转移<ul>
<li>dp[i][j] = max(dp[i-1][j], dp[i][j-1]), if text1[i] != text2[j]</li>
<li>dp[i][j] = dp[i-1][j-1] + 1, if text1[i] == text2[j]</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubsequence</span></span>(text1: <span class="type">String</span>, text2: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = text1.size</span><br><span class="line">    <span class="keyword">val</span> n = text2.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to m) &#123;</span><br><span class="line">      dp(i)(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> to n) &#123;</span><br><span class="line">      dp(<span class="number">0</span>)(j) = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text1(i - <span class="number">1</span>) == text2(j - <span class="number">1</span>)) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp(i)(j) = <span class="type">Math</span>.max(dp(i - <span class="number">1</span>)(j), dp(i)(j - <span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(printLCS(text1, text2, dp))</span><br><span class="line">    dp(m)(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-8-双串问题-字符串匹配"><a href="#2-1-8-双串问题-字符串匹配" class="headerlink" title="2.1.8 双串问题-字符串匹配"></a>2.1.8 双串问题-字符串匹配</h3><p>编辑距离: 求把字符串word1通过插入, 删除, 替换为word2的最短操作次数</p>
<ul>
<li>状态定义: dp[i][j]表示从word1[0..i]变为word2[0..j]的最少操作步骤</li>
<li>状态转移:<ul>
<li>if word1[i] == word2[j]<ul>
<li>dp[i][j] = dp[i - 1][j - 1]</li>
</ul>
</li>
<li>if word1[i] != word2[j]<ul>
<li>deleteCost = dp[i-1][j] + 1</li>
<li>insertCost = dp[i][j - 1] + 1</li>
<li>updateCost = dp[i -1][j - 1] + 1</li>
<li>dp[i][j] = min(deleteCost, insertCost, updateCost)</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDistance</span></span>(word1: <span class="type">String</span>, word2: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = word1.size</span><br><span class="line">    <span class="keyword">val</span> n = word2.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to m) &#123;</span><br><span class="line">      dp(i)(<span class="number">0</span>) = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> to n) &#123;</span><br><span class="line">      dp(<span class="number">0</span>)(j) = j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (word1(i - <span class="number">1</span>) == word2(j - <span class="number">1</span>)) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp(i)(j) = <span class="type">Array</span>(dp(i - <span class="number">1</span>)(j), dp(i)(j - <span class="number">1</span>), dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)).min + <span class="number">1</span> <span class="comment">// delete, insert, update cost</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(m)(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题变种: 通配符匹配问题</strong></p>
<ul>
<li>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配, 输入s和p, 输出s是否和p匹配</li>
<li>状态定义: dp[i][j]表示字符串s[0..i], p[0..j]是否匹配</li>
<li>状态转移:<ul>
<li>dp[i][j] = (dp[i - 1][j - 1])  if (s[i] == p[j]) or p[j] == ‘?’</li>
<li>dp[i][j] = or(dp[i-1][j], dp[i][j - 1]) , if p[j] == ‘*’, 匹配时使用或不使用星号</li>
<li>dp[i][j] = false, 其他情况</li>
</ul>
</li>
<li>边界条件<ul>
<li>dp[0][0] = true</li>
<li>dp[i][0] = false</li>
<li>dp[0][j] = true, if p[0..j]都是星号</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDistance</span></span>(word1: <span class="type">String</span>, word2: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = word1.size</span><br><span class="line">    <span class="keyword">val</span> n = word2.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](m + <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to m) &#123;</span><br><span class="line">      dp(i)(<span class="number">0</span>) = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> to n) &#123;</span><br><span class="line">      dp(<span class="number">0</span>)(j) = j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (word1(i - <span class="number">1</span>) == word2(j - <span class="number">1</span>)) &#123;</span><br><span class="line">          dp(i)(j) = dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp(i)(j) = <span class="type">Array</span>(dp(i - <span class="number">1</span>)(j), dp(i)(j - <span class="number">1</span>), dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)).min + <span class="number">1</span> <span class="comment">// delete, insert, update cost</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(m)(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-9-矩阵问题-最大正方形"><a href="#2-1-9-矩阵问题-最大正方形" class="headerlink" title="2.1.9 矩阵问题-最大正方形"></a>2.1.9 矩阵问题-最大正方形</h3><p>在由’0’和’1’组成的二维矩阵内, 找到只包含’1’的最大正方形, 并返回面积<br>例如如下矩阵, 最大正方形面积为4</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> matrix = <span class="type">Array</span>(</span><br><span class="line">      <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">      <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>),</span><br><span class="line">      <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>),</span><br><span class="line">      <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<ul>
<li>状态定义: dp[i][j]表示以(i,j)为右下角的只包含1的最大正方形的边长</li>
<li>状态转移<ul>
<li>dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1, if matrix[i][j] == 1</li>
<li>dp[i][j] = 0, if matrix[i][j] == 0</li>
</ul>
</li>
<li>边界条件<ul>
<li>dp[0][j] = 1, if matrix[0][j] == 1 </li>
<li>dp[i][0] = 1, if matrix[i][0] == 1</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span></span>(matrix: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Char</span>]]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> m = matrix.size</span><br><span class="line">    <span class="keyword">val</span> n = matrix(<span class="number">0</span>).size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](m, n)</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix(i)(j) == &#x27;<span class="number">1</span>&#x27;) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">            dp(i)(j) = <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp(i)(j) = <span class="type">Array</span>(dp(i - <span class="number">1</span>)(j), dp(i)(j - <span class="number">1</span>), dp(i - <span class="number">1</span>)(j - <span class="number">1</span>)).min + <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp(i)(j) = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="type">Math</span>.max(res, dp(i)(j))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res * res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-10-矩阵问题-最大子矩阵"><a href="#2-1-10-矩阵问题-最大子矩阵" class="headerlink" title="2.1.10 矩阵问题-最大子矩阵"></a>2.1.10 矩阵问题-最大子矩阵</h3><p>给定一个正整数、负整数和 0 组成的 N × M矩阵，编写代码找出元素总和最大的子矩阵。<br>返回一个数组 [r1, c1, r2, c2]，其中 r1, c1 分别代表子矩阵左上角的行号和列号，r2, c2 分别代表右下角的行号和列号。若有多个满足条件的子矩阵，返回任意一个均可</p>
<p>本题目的技巧是将二维矩阵问题转化为一维的动态规划问题<br>设数组colSum[k]表示从第i行到第j行的列和, 问题转化为求一维数组colSum的最大子数组和</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMaxMatrix</span></span>(matrix: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]]): <span class="type">Array</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> res = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> <span class="type">N</span> = matrix.length</span><br><span class="line">    <span class="keyword">val</span> <span class="type">M</span> = matrix(<span class="number">0</span>).length</span><br><span class="line">    <span class="keyword">var</span> maxSum = matrix(<span class="number">0</span>)(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> maxEnding = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> tempX = <span class="number">0</span> <span class="comment">// temp coordinate</span></span><br><span class="line">    <span class="keyword">var</span> tempY = <span class="number">0</span> <span class="comment">// temp coordinate</span></span><br><span class="line">    <span class="keyword">val</span> colSum = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="type">M</span>) <span class="comment">// column sum from i to j</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until <span class="type">N</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (t &lt;- <span class="number">0</span> until <span class="type">M</span>) &#123;</span><br><span class="line">        colSum(t) = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- i until <span class="type">N</span>) &#123;</span><br><span class="line">        maxEnding = <span class="number">0</span> <span class="comment">// dp[i - 1]</span></span><br><span class="line">        <span class="keyword">for</span> (k &lt;- <span class="number">0</span> until <span class="type">M</span>) &#123;</span><br><span class="line">          colSum(k) = colSum(k) + matrix(j)(k)</span><br><span class="line">          <span class="keyword">if</span> (maxEnding &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            maxEnding = colSum(k) + maxEnding</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxEnding = colSum(k)</span><br><span class="line">            tempX = i</span><br><span class="line">            tempY = k</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (maxEnding &gt; maxSum) &#123;</span><br><span class="line">            maxSum = maxEnding</span><br><span class="line">            res(<span class="number">0</span>) = tempX</span><br><span class="line">            res(<span class="number">1</span>) = tempY</span><br><span class="line">            res(<span class="number">2</span>) = j</span><br><span class="line">            res(<span class="number">3</span>) = k</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-前缀和问题"><a href="#2-2-前缀和问题" class="headerlink" title="2.2 前缀和问题"></a>2.2 前缀和问题</h2><p>前缀和是线性动态规划的一种, 前缀和隐含了动态规划的思想<br><strong>1.什么是前缀和</strong></p>
<ul>
<li>状态定义：sums[i] := [0..i-1] 的和</li>
<li>状态转移：sums[i] = a[i - 1] + sums[i - 1]</li>
<li>初始化：sums[0] = 0</li>
</ul>
<p><strong>2.常见问题</strong></p>
<ul>
<li>求区间和: sum(i, j) = sums(0, j + 1) - sums(0, j)</li>
<li>快速求矩形和: sum(abcd)=sum(od)−sum(ob)−sum(oc)+sum(oa)</li>
<li>结合数据结构哈希表, 记录查询前缀和结果<ul>
<li>和为k的最长子数组, key为前缀和, value为索引</li>
<li>和为k的子数组个数, key为前缀和, value为count数</li>
</ul>
</li>
<li>逆运算差分: 差分数组的前缀和是原数组</li>
</ul>
<h3 id="2-2-1-求数组的区间和"><a href="#2-2-1-求数组的区间和" class="headerlink" title="2.2.1 求数组的区间和"></a>2.2.1 求数组的区间和</h3><p>给定一个整数数组  nums，求出数组从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span>(<span class="params">_nums: <span class="type">Array</span>[<span class="type">Int</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> n = _nums.size</span><br><span class="line">    <span class="keyword">val</span> prefix = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n + <span class="number">1</span>)</span><br><span class="line">    buildPrefixSum()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">buildPrefixSum</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      prefix(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">        prefix(i) = prefix(i - <span class="number">1</span>) + _nums(i - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span></span>(left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      prefix(right + <span class="number">1</span>) - prefix(left)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-用HashMap维护前缀和"><a href="#2-2-2-用HashMap维护前缀和" class="headerlink" title="2.2.2 用HashMap维护前缀和"></a>2.2.2 用HashMap维护前缀和</h3><p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回该数组中和为 k 的连续子数组的个数<br>hashmap&lt;前缀和的值, 出现次数&gt;, 检测当pre[j−1] == pre[i]−k, count值累加</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>], k: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.size</span><br><span class="line">    <span class="keyword">val</span> map = <span class="keyword">new</span> mutable.<span class="type">HashMap</span>[<span class="type">Int</span>, <span class="type">Int</span>]()</span><br><span class="line">    map.put(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> prefixSum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> maxCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      prefixSum = prefixSum + nums(i)</span><br><span class="line">      <span class="keyword">val</span> t = prefixSum - k</span><br><span class="line">      <span class="keyword">if</span> (map.contains(t)) &#123;</span><br><span class="line">        maxCount = maxCount + map(t)</span><br><span class="line">      &#125;</span><br><span class="line">      map.put(prefixSum, map.getOrElse(prefixSum, <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    maxCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-3-区间问题"><a href="#2-3-区间问题" class="headerlink" title="2.3 区间问题"></a>2.3 区间问题</h2><ul>
<li>状态定义dp[i][j], 表示原问题在区间[i..j]上的解</li>
<li>状态转移<ul>
<li>与常数个规模较小的子问题相关, 时间复杂度为O(n^2)<ul>
<li>例如: 最长回文子串, dp[i][j] = f(dp[i + 1][j], dp[i + 1][j - 1], dp[i][j - 1])</li>
</ul>
</li>
<li>与O(n)个更小规模的子问题有关, O(n^3)<ul>
<li>dp[i][j] = g(f(dp[i][k], dp[k + 1][j])) 其中 k = i .. j-1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-1-最长回文子串"><a href="#2-3-1-最长回文子串" class="headerlink" title="2.3.1 最长回文子串"></a>2.3.1 最长回文子串</h3><p>求字符串s的最长回文子串, </p>
<ul>
<li>例如s=”abbacd”, 答案是”abba”</li>
<li>s=”a”, 答案是”a”</li>
</ul>
<p>解题思路:<br>注意最长回文子串, 不是最长回文子序列, 前者是连续的, 后者不要求连续, 因此dp数组要用boolean类型:</p>
<ul>
<li>状态定义: dp[i][j]表示从i到j的子串是否是回文</li>
<li>状态转移:<ul>
<li>dp[i][j] = dp[i+1][j - 1],  if s[i] == s[j], 长度大于2</li>
<li>dp[i][j] = false, if s[i] != s[j]</li>
</ul>
</li>
<li>边界条件:<br>dp[i][i] = true<br>dp[i][j] = true, if j - i &lt; 3, 类似”aa”, “aca”这样的长度为2或3的字符串</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span></span>(s: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = s.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](n, n)</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> begin = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (len &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">val</span> j = i + len - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; n) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            dp(i)(j) = <span class="literal">true</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s(i) != s(j)) &#123;</span><br><span class="line">            dp(i)(j) = <span class="literal">false</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">              dp(i)(j) = <span class="literal">true</span> <span class="comment">// such as &quot;aca&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              dp(i)(j) = dp(i + <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (dp(i)(j) &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">            maxLen = j - i + <span class="number">1</span></span><br><span class="line">            begin = i</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.substring(begin, begin + maxLen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-最长回文子序列"><a href="#2-3-2-最长回文子序列" class="headerlink" title="2.3.2 最长回文子序列"></a>2.3.2 最长回文子序列</h3><p>给你一个字符串s ，找出其中最长的回文子序列，并返回该序列的长度, 例如s=”bbbab”, 输出是”bbbb”</p>
<ul>
<li>状态定义: dp[i][j]表示从i到j的最长回文子串长度, 最终结果为dp[0][n - 1]</li>
<li>状态转移<ul>
<li>dp[i][j] = dp[i+1][j - 1] + 2, if s[i] == s[j]</li>
<li>dp[i][j] = max{dp[i + 1][j], dp[i][j - 1]}, if s[i] != s[j]<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindromeSubseq</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = s.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n, n) <span class="comment">// it&#x27;s sparse, can replace with hashmap</span></span><br><span class="line">    <span class="keyword">for</span> (len &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">val</span> j = i + len - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; n) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            dp(i)(j) = <span class="number">1</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s(i) != s(j)) &#123;</span><br><span class="line">            dp(i)(j) = <span class="type">Math</span>.max(dp(i + <span class="number">1</span>)(j), dp(i)(j - <span class="number">1</span>))</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp(i)(j) = dp(i + <span class="number">1</span>)(j - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(<span class="number">0</span>)(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="2-4-背包问题"><a href="#2-4-背包问题" class="headerlink" title="2.4 背包问题"></a>2.4 背包问题</h2><p><strong>1.0-1背包问题</strong></p>
<ul>
<li>问题定义: 有n种物品，物品j的体积为v(j), 价值为w(j), 有一个体积限制V。每种物品只有 1 个，只有选或者不选</li>
<li>状态定义: dp[i][j] := 考虑了[0..i]里的物品，占用了j空间，所能取得的最大价值</li>
<li>状态转移:<ul>
<li>dp[i][j] = max(dp[i - 1][j] 当前物品不选, dp[i - 1][j - v[i]] + w[i] 当前物品选), if j - v[i] &gt;= 0</li>
</ul>
</li>
<li>空间优化<ul>
<li>用一维数组, 防止遍历时产生覆盖, j需要从大到小遍历</li>
<li>dp[j] = max{dp[j], dp[j - v[i]] + w[i]}</li>
</ul>
</li>
<li>如果背包要求装满<ul>
<li>初始化dp[i][j]为-1, 表示方案不可取, dp[0][0] = 0</li>
<li>状态转移时，需要判断dp[i - 1][j - v[i]] != -1</li>
</ul>
</li>
</ul>
<p><strong>2.完全背包问题</strong></p>
<ul>
<li>问题定义: 有n种物品，物品j的体积为v[j]，价值为w[i]，有一个体积限制V, 每种物品有无限个</li>
<li>状态定义: dp[i][j] := 考虑了[0..i]里的物品，占用了j空间，所能取得的最大价值</li>
<li>状态转移:<ul>
<li>dp[i][j] = max(dp[i - 1][j] 当前物品不选, <strong>dp[i][j - v[i]]</strong> + w[i] 当前物品选)，if j - v[i] &gt;= 0</li>
</ul>
</li>
<li>空间优化<ul>
<li>用一维数组, j从小到大遍历</li>
<li>dp[j] = max{dp[j], dp[j - v[i] + w[i]]}</li>
</ul>
</li>
</ul>
<p><strong>3.多重背包问题</strong></p>
<ul>
<li>问题定义<br>有 n 种物品，物品 j 的体积为 v[j]，价值为 w[i]，有一个体积限制 V 。每种物品还有一个c[i] ，表示每种物品的个数</li>
<li>问题思路<br>对于物品 i, 数量限制是c[i] , 可以将其分成若干物品，它们的价值和体积为：(w[i], v[i]), (2 * w[i], 2 * v[i]) .., 超过体积限制的就不要, 然后对这些物品做0-1背包问题 </li>
</ul>
<p><strong>4.问题类型</strong><br>    - 最值问题: 例如零钱兑换<br>    - 恰好取到背包容量: 例如分割等和子集<br>    - 组合问题（求方案数）: 需要考虑组合的顺序问题, 例如零钱兑换就是无顺序的</p>
<h3 id="2-4-1-最值问题"><a href="#2-4-1-最值问题" class="headerlink" title="2.4.1 最值问题"></a>2.4.1 最值问题</h3><p>零钱兑换问题<br>给你一个整数数组coins，表示不同面额的硬币, 硬币数量无限多；以及一个整数amount，表示总金额<br>计算并返回可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回-1</p>
<p>这是一个完全背包问题</p>
<ul>
<li>状态定义: dp[j]表示0..i种硬币, 找零总金额为j的最小硬币数量</li>
<li>状态转移: dp[j] = min{[j], dp[j - coins[i]] + 1} ,  j &gt;= coins[i]</li>
<li>初始化<ul>
<li>dp[j] = Int.Max - 1</li>
<li>dp[0] = 0</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChangeOpt</span></span>(coins: <span class="type">Array</span>[<span class="type">Int</span>], amount: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = coins.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](amount + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to amount) &#123;</span><br><span class="line">      dp(j) = <span class="type">Int</span>.<span class="type">MaxValue</span> - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">0</span> to amount) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins(i) &lt;= j) &#123;</span><br><span class="line">          dp(j) = <span class="type">Math</span>.min(dp(j), dp(j - coins(i)) + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> res = dp(amount)</span><br><span class="line">    <span class="keyword">if</span> (res &gt; amount) <span class="number">-1</span> <span class="keyword">else</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-恰好取到背包容量"><a href="#2-4-2-恰好取到背包容量" class="headerlink" title="2.4.2 恰好取到背包容量"></a>2.4.2 恰好取到背包容量</h3><p>给你一个只包含正整数的非空数组nums。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等<br>先求数组总和total, 如果total是奇数, 则不可分, 如果是偶数可以继续下面的步骤<br>令halfSum = total / 2, 问题转化为0-1背包问题, 从数组中取一个子集, 其总和为halfSum, 并要求背包填满</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canPartition</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nums.size</span><br><span class="line">    <span class="keyword">val</span> totalSum = nums.sum</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || totalSum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> halfSum = totalSum / <span class="number">2</span></span><br><span class="line">      <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](halfSum + <span class="number">1</span>)</span><br><span class="line">      dp(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to halfSum) &#123;</span><br><span class="line">        dp(j) = <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- halfSum to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= nums(i) &amp;&amp; dp(j - nums(i)) != <span class="number">-1</span>) &#123;</span><br><span class="line">            dp(j) = <span class="type">Math</span>.max(dp(j), dp(j - nums(i)) + nums(i))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dp(halfSum) != <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-求组合的方案数"><a href="#2-4-3-求组合的方案数" class="headerlink" title="2.4.3 求组合的方案数"></a>2.4.3 求组合的方案数</h3><p>求零钱兑换问题的方案总数<br>完全背包问题, 组合没有顺序</p>
<ul>
<li>状态定义: dp[j]表达前i个硬币, target为j时的组合数</li>
<li>状态转移<ul>
<li>dp[j] = dp[j] + dp[j - coins[i]], if j &gt;= nums[i]</li>
<li>j的遍历方向是从小到大, 因为coins[i]可以被选择多次</li>
<li>由于组合没有顺序性, i的遍历在外层, j的遍历在内层</li>
</ul>
</li>
<li>边界条件<ul>
<li>dp[0] = 1, 表达target为0, 方案数为空集</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span></span>(amount: <span class="type">Int</span>, coins: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = coins.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](amount + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to amount) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= coins(i)) &#123;</span><br><span class="line">          dp(j) = dp(j) + dp(j - coins(i))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-状态压缩"><a href="#2-5-状态压缩" class="headerlink" title="2.5 状态压缩"></a>2.5 状态压缩</h2><p>状态压缩动态规划，用于NP问题的小规模求解, 是利用计算机二进制的性质来描述状态</p>
<h3 id="2-5-1-旅行商问题"><a href="#2-5-1-旅行商问题" class="headerlink" title="2.5.1 旅行商问题"></a>2.5.1 旅行商问题</h3><p>一个商人想要旅行各地并进行贸易。各地之间有若干条单向的通道相连，商人从一个地方出发，想要用最短的路程把所有地区环游一遍，请问环游需要的最短路程是多少？这里graph用邻接链表表示, 例如graph=[[1, 2, 3], [0], [0], [0]], 最短路径长度为4</p>
<ul>
<li>预处理: 用floyd算法计算任意两个点对之间的最短路径distance[i][j]</li>
<li>状态定义:<ul>
<li>dp[s][i]表达最后一个节点是i, 状态是s的最短路径</li>
<li>状态s是一个mask, s的二进制s[v]表示已经搜索过节点v</li>
</ul>
</li>
<li>状态转移<ul>
<li>dp[s][i] =  min {dp[s\i][v] + distance[v][i]}, 遍历上一个节点v, v的状态是没有搜索过节点i, 求最短路径</li>
<li>最终结果: min{dp[2^n - 1][i]}</li>
<li>边界条件<ul>
<li>当s中只有一个1, 表示开始节点, dp[s][i] = 0</li>
<li>默认dp[s][i] = Int.Max</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shortestPathLength</span></span>(graph: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = graph.size</span><br><span class="line">    <span class="keyword">val</span> states = <span class="number">1</span> &lt;&lt; n</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](states, n)</span><br><span class="line">    <span class="keyword">val</span> distance = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n, n + <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// floyd algorithm for min distance between each pair</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        distance(i)(j) = n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (graph(i).contains(j)) &#123;</span><br><span class="line">          distance(i)(j) = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">          distance(i)(j) = <span class="type">Math</span>.min(distance(i)(j), distance(i)(k) + distance(k)(j))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dp algorithm</span></span><br><span class="line">    <span class="keyword">for</span> (s &lt;- <span class="number">0</span> until states) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        dp(s)(i) = <span class="type">Int</span>.<span class="type">MaxValue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (s &lt;- <span class="number">1</span> until states) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="comment">// s is 2 ^ k</span></span><br><span class="line">        <span class="keyword">if</span> ((s &amp; (s - <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">          dp(s)(i) = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> ((s &amp; <span class="number">1</span> &lt;&lt; i) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (v &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">              <span class="keyword">if</span> ((s &amp; (<span class="number">1</span> &lt;&lt; v)) != <span class="number">0</span> &amp;&amp; (v != i)) &#123;</span><br><span class="line">                dp(s)(i) = <span class="type">Math</span>.min(dp(s)(i), dp(s ^ (<span class="number">1</span> &lt;&lt; i))(v) + distance(v)(i))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(states - <span class="number">1</span>).min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>思路二: 用广度优先遍历+状态压缩</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortestPathLengthBFS</span></span>(graph: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> visited = <span class="keyword">new</span> mutable.<span class="type">HashSet</span>[(<span class="type">Int</span>, <span class="type">Int</span>)]()</span><br><span class="line">    <span class="keyword">val</span> queue = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)]() <span class="comment">// identity, mask, distance</span></span><br><span class="line">    <span class="keyword">val</span> n = graph.size</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      visited.add((i, <span class="number">1</span> &lt;&lt;i))</span><br><span class="line">      queue.enqueue((i, <span class="number">1</span> &lt;&lt; i, <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (queue.nonEmpty &amp;&amp; !isDone) &#123;</span><br><span class="line">      <span class="keyword">val</span> (i, mask, dist) = queue.dequeue()</span><br><span class="line">      <span class="keyword">if</span> (mask == ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>)) &#123;</span><br><span class="line">        isDone = <span class="literal">true</span></span><br><span class="line">        res = dist</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- graph(i)) &#123;</span><br><span class="line">        <span class="keyword">val</span> maskForJ = mask | <span class="number">1</span> &lt;&lt; j</span><br><span class="line">        <span class="keyword">if</span> (!visited.contains((j, maskForJ))) &#123;</span><br><span class="line">          queue.enqueue((j, maskForJ, dist + <span class="number">1</span>))</span><br><span class="line">          visited.add((j, maskForJ))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-计数问题"><a href="#2-6-计数问题" class="headerlink" title="2.6 计数问题"></a>2.6 计数问题</h2><p>有两种模式:<br>1.找到组合数公式，然后用DP的方式或者用含阶乘的公式求组合数, 例如: 路径问题<br>2.找到递归关系，然后以DP的方式求这个递推关系，如果是线性递推关系，可以用矩阵快速幂加速 例如:隐晦的递推关系: 栅栏涂色</p>
<h3 id="2-6-1-组合数问题"><a href="#2-6-1-组合数问题" class="headerlink" title="2.6.1 组合数问题"></a>2.6.1 组合数问题</h3><p>给你一个整数n ，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树有多少种</p>
<ul>
<li>状态定义<ul>
<li>令f(i, n): 表达序列长度为n, 以i为根的二叉搜索树长度</li>
<li>g(n) 表达长度为n的二叉搜索树长度</li>
</ul>
</li>
<li>状态转移<ul>
<li>g(n) = sum{f(i, n)}</li>
<li>f(i, n) = g(i - 1)*g(n - i)</li>
<li>g(n) = sum{g(i - 1)*g(n - i)}, g(n)这样的组合数, 是数学上的卡特兰数</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numTrees</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](n + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">    dp(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">2</span> to n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> to i) &#123;</span><br><span class="line">        dp(i) = dp(i) + dp(j - <span class="number">1</span>) * dp(i - j)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-1-隐晦的递推关系"><a href="#2-5-1-隐晦的递推关系" class="headerlink" title="2.5.1 隐晦的递推关系"></a>2.5.1 隐晦的递推关系</h3><p>有n个一样的骰子，每个骰子上都有f个面，分别标号为 1, 2, …, f<br>约定：掷骰子的得到总点数为各骰子面朝上的数字的总和, 求总点数为target的组合总数, 结果比较大模10^9+7</p>
<ul>
<li>状态定义:<ul>
<li>dp[i][j] 表示i个骰子, target为j的组合总数</li>
</ul>
</li>
<li>状态转移:<ul>
<li>dp[i][j] = d[i - 1][j - 1] + .. + d[i - 1][j - f], 遍历f种骰子的值</li>
</ul>
</li>
<li>初始化:<ul>
<li>dp[0][0] = 0</li>
</ul>
</li>
<li>空间优化<ul>
<li>用滚动数组, 类似0-1背包问题, 用dp[j]就可以,</li>
<li>为了防止覆盖, 遍历方向是从大到小</li>
<li>每一轮遍历j时, 需要dp[j] = 0</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numRollsToTarget</span></span>(n: <span class="type">Int</span>, f: <span class="type">Int</span>, target: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> mod = (<span class="number">1e9</span> + <span class="number">7</span>).toInt</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](target + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- target to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">        dp(j) = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (k &lt;- <span class="number">1</span> to f <span class="keyword">if</span> j &gt;= k) &#123;</span><br><span class="line">          dp(j) = (dp(j) + dp(j - k)) % mod</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp(target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-7-数位问题"><a href="#2-7-数位问题" class="headerlink" title="2.7 数位问题"></a>2.7 数位问题</h2><p>求解在一段区间上[L, R]上满足条件的数字的个数<br>例如, 求最大为N的数字组合<br>我们有一组排序的数字 D，它是{‘1’,’2’,’3’,’4’,’5’,’6’,’7’,’8’,’9’} 的非空子集.（请注意，’0’ 不包括在内）<br>用这些数字写数字, 例如’112’, ‘335’, 给定一个整数N, 返回可以用D中的数字能写出的小于或等于N的正整数的数目</p>
<ul>
<li>状态定义<ul>
<li>令N的数位总数为K</li>
<li>dp[i]表示除掉N前面的i位, 剩余的K - i位的合法组合总数, 例如N=2345, dp[0]表示2345, dp[1]表示345,</li>
</ul>
</li>
<li>状态转移<ul>
<li>当s[i] == d, dp[i] += dp[i+ 1], d是digits的十进制值, 顶到s[i]的上边界</li>
<li>当s[i] &gt; d, dp[i] += d_length ** (K - i - 1)</li>
</ul>
</li>
<li>最终答案<ul>
<li>dp[0] += 所有数位小于K的组合总数</li>
</ul>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atMostNGivenDigitSet</span></span>(digits: <span class="type">Array</span>[<span class="type">String</span>], <span class="type">N</span>: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> nStr = <span class="type">N</span>.toString</span><br><span class="line">    <span class="keyword">val</span> dLen = digits.size</span><br><span class="line">    <span class="keyword">val</span> digitsValue = digits.map(_.toInt)</span><br><span class="line">    <span class="keyword">val</span> <span class="type">K</span> = nStr.size</span><br><span class="line">    <span class="keyword">val</span> dp = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="type">K</span> + <span class="number">1</span>)</span><br><span class="line">    dp(<span class="type">K</span>) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="type">K</span> - <span class="number">1</span> to <span class="number">0</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> iValue = nStr(i) - &#x27;<span class="number">0</span>&#x27;</span><br><span class="line">      <span class="keyword">for</span> (d &lt;- digitsValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d &lt; iValue) &#123;</span><br><span class="line">          dp(i) = dp(i) + <span class="type">Math</span>.pow(dLen, <span class="type">K</span> - i - <span class="number">1</span>).toInt</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == iValue) &#123;</span><br><span class="line">          dp(i) = dp(i) + dp(i + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until <span class="type">K</span>) &#123;</span><br><span class="line">      dp(<span class="number">0</span>) = dp(<span class="number">0</span>) + <span class="type">Math</span>.pow(dLen, i).toInt</span><br><span class="line">    &#125;</span><br><span class="line">    dp(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><ul>
<li>动态规划的主要特征是最优子结构(最值问题, 组合方案数问题等), 重叠子问题和无后效性</li>
<li>实际问题的难点是识别动态规划的模式, 本篇中主要的模式包括线性问题, 前缀和问题, 区间问题, 背包问题, 状态压缩问题, 计数问题, 数位问题</li>
<li>其实工作中能遇到用动规的场景不多, 学了这个技艺有什么用呢? 我想可以用王国维的一句话, “无用之用, 实为大用”</li>
</ul>
<p>参考:</p>
<ul>
<li><a href="https://leetcode-cn.com/leetbook/detail/dynamic-programming-1-plus/">动态规划精讲 By Leetcode</a></li>
<li>Dynamic Programming for Coding Interviews</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-动态规划之道&quot;&gt;&lt;a href=&quot;#1-动态规划之道&quot; class=&quot;headerlink&quot; title=&quot;1. 动态规划之道&quot;&gt;&lt;/a&gt;1. 动态规划之道&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DP问题的特征&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;最优子结构: 原问题是一个最优化问题, 可递归地拆分为多个子问题, 通过数学方法组合各个子问题的最优解, 可以求得问题的最优解&lt;/li&gt;
&lt;li&gt;重叠的子问题: 子问题相互重叠, 例如斐波拉契数列问题, 而子问题如果不重叠, 可以用一般的递归&lt;/li&gt;
&lt;li&gt;无后效性: 某一个状态一旦确定, 就不受这个状态以后决策的影响, 例如地下城游戏&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://example.com/tags/algorithm/"/>
    
      <category term="Dynamic Programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Bayesian Networks</title>
    <link href="http://example.com/2020/12/27/an-introduction-to-bayesian-networks/"/>
    <id>http://example.com/2020/12/27/an-introduction-to-bayesian-networks/</id>
    <published>2020-12-27T10:54:04.000Z</published>
    <updated>2021-01-10T06:00:33.850Z</updated>
    
    <content type="html"><![CDATA[<p>冬日晴好, 下午看完了论文, 对Bayesian Network是什么有了系统的了解.论文是causalnex工具里提到的<br>Stephenson, Todd Andrew. An introduction to Bayesian network theory and usage. No. REP_WORK. IDIAP, 2000.</p>
<p>该论文主要论述了以下几点:</p>
<ul>
<li>What is Bayesian network</li>
<li>Inference Bayesian network: junction tree algorithm</li>
<li>Learning Bayesian Network</li>
<li>Applications<ul>
<li>Automatic Speech Recognition: Dynamic Bayesian Network</li>
<li>Computer troubleshooting</li>
<li>Medical diagnosis</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h1 id="1-What-is-Bayesian-Network-BN"><a href="#1-What-is-Bayesian-Network-BN" class="headerlink" title="1.What is Bayesian Network(BN)"></a>1.What is Bayesian Network(BN)</h1><p>A directed acyclic graph(DAG) with probability distribution for each variable<br>这是一个交叉领域, 涉及概率论和图论, 主要可以应用于因果推断, 其优势是:</p>
<ul>
<li>可以引入专家经验</li>
<li>通过图结构化简联合概率分布求解</li>
</ul>
<p>下图是Hackerman解释BN时用的信用欺诈网络:<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn01.jpg" alt="bn01"></p>
<h1 id="2-Inference-Bayesian-Network"><a href="#2-Inference-Bayesian-Network" class="headerlink" title="2.Inference Bayesian Network"></a>2.Inference Bayesian Network</h1><p>一个示例如下, 对欺诈模型进行条件概率求解时, 可借助BN进行化简, 这是一个离散变量的例子.<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn02.jpg" alt="bn02"></p>
<p>其他常见的推断方法包括<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn03.jpg" alt="bn03"></p>
<p>作者在论文中, 重点讲述了Junction Tree Method. 该算法通过将图进行Moralize和Triangulate转化为Join Tree进行推断<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn04.jpg" alt="bn04"></p>
<h1 id="3-Learning-Bayesian-Network"><a href="#3-Learning-Bayesian-Network" class="headerlink" title="3.Learning Bayesian Network"></a>3.Learning Bayesian Network</h1><p>需要关心如下四种场景<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn05.jpg" alt="bn05"></p>
<h1 id="4-Applications"><a href="#4-Applications" class="headerlink" title="4.Applications"></a>4.Applications</h1><p>一个实用案例, 在windows95中, 采用了BN进行printer的异常检测<br><img src="https://www.cyanny.com/2020/12/27/an-introduction-to-bayesian-networks/bn06.jpg" alt="bn06"></p>
<p>BN在目前的机器学习中, 应该是计算复杂度高, 应用范围不像深度学习这么广, 而因果推理上, 样本量可以不用很大, 会有不错的应用效果.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冬日晴好, 下午看完了论文, 对Bayesian Network是什么有了系统的了解.论文是causalnex工具里提到的&lt;br&gt;Stephenson, Todd Andrew. An introduction to Bayesian network theory and usage. No. REP_WORK. IDIAP, 2000.&lt;/p&gt;
&lt;p&gt;该论文主要论述了以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is Bayesian network&lt;/li&gt;
&lt;li&gt;Inference Bayesian network: junction tree algorithm&lt;/li&gt;
&lt;li&gt;Learning Bayesian Network&lt;/li&gt;
&lt;li&gt;Applications&lt;ul&gt;
&lt;li&gt;Automatic Speech Recognition: Dynamic Bayesian Network&lt;/li&gt;
&lt;li&gt;Computer troubleshooting&lt;/li&gt;
&lt;li&gt;Medical diagnosis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Causal Inference, AI" scheme="http://example.com/tags/causal-inference-ai/"/>
    
  </entry>
  
  <entry>
    <title>Structure Learning Algorithm NOTEARS</title>
    <link href="http://example.com/2020/12/25/structure-learning-algorithm-notears/"/>
    <id>http://example.com/2020/12/25/structure-learning-algorithm-notears/</id>
    <published>2020-12-25T14:01:59.000Z</published>
    <updated>2021-01-10T05:54:52.580Z</updated>
    
    <content type="html"><![CDATA[<p>最近三年扎进了AI领域, 学了很多算法, 最近开始真正拉高维度看AI, AI不仅仅是Machine Learning, 还有State Based, Variable Bases, Logic编程等方法. 最近半年看了<strong>The book of Why</strong>, 深受启发, 看世界的角度也发生很大变化, 同时也觉得因果推理将是一个值得研究的好领域, 就算目前落地场景不多, 相信未来也是大有可为.</p>
<p>今天静下来, 好好看了在CausalNex库中, 用到的算法NOTEARS, 用于结构学习, 该论文发表在2018的NIPS, 方法神奇, 解决方案简洁, 以下是自己的一些笔记:</p>
<p>Paper: Zheng, Xun, et al. “DAGs with NO TEARS: Continuous optimization for structure learning.” Advances in Neural Information Processing Systems 31 (2018): 9472-9483.</p>
<a id="more"></a>

<h1 id="1-主要问题"><a href="#1-主要问题" class="headerlink" title="1.主要问题"></a>1.主要问题</h1><p>Bayesian Network Graph(DAG) Structure Estimating, 这是一个经典的NP-HARD问题</p>
<table>
<thead>
<tr>
<th align="left">维度</th>
<th align="left">传统解法</th>
<th align="left">NOTEARS</th>
</tr>
</thead>
<tbody><tr>
<td align="left">思路</td>
<td align="left">combinatorial optimization problem, local heuristics for enforcing the acyclicity constraint, 例如 Order search, greedy search, …</td>
<td align="left">Score based continuous learning, standard numerical algorithm</td>
</tr>
<tr>
<td align="left">复杂度</td>
<td align="left">O(d!), d is nodes</td>
<td align="left">O(d^3), 当图入度很高时, 计算效率很高</td>
</tr>
<tr>
<td align="left">优势</td>
<td align="left">–</td>
<td align="left">支持有向和无向图, 代码简洁不超过60lines, 与Global Optimization算法结果接近</td>
</tr>
<tr>
<td align="left">局限</td>
<td align="left">困难的组合优化问题</td>
<td align="left">建模函数是Smooth function, nonconvex</td>
</tr>
</tbody></table>
<h1 id="2-NOTEARS算法"><a href="#2-NOTEARS算法" class="headerlink" title="2.NOTEARS算法"></a>2.NOTEARS算法</h1><p>其英文缩写是 Non-combinatorial Optimization via Trace Exponential and Augmented lagRangian for Structure learning<br>该算法我个人理解主要的贡献是找到一种数学建模方法, 把DAG的学习问题转化为可以用拉格朗日乘数法可求最优解的问题, 其建模的问题定义如下:</p>
<p><img src="https://www.cyanny.com/2020/12/25/structure-learning-algorithm-notears/notears01.jpg" alt="model def"></p>
<p>基于拉格朗日乘数法进行数值优化, 优势是:一个有n个变量与k个约束条件的最优化问题转换为一个解有n + k个变量的方程组的解的问题, 同时可复用一些优化算法: L-BFGS, quasi-Newton(PQN)</p>
<ul>
<li>例如: 求f(x, y)在g(x, y)=c约数下的最大值, 可以转化为求下面函数的极值的问题:</li>
<li>\(L(x, y, \gamma) = f(x, y) + \gamma * (g(x, y) - c)\)</li>
</ul>
<p>下图是NOTEARS抽象为拉格朗日乘数的公式</p>
<p><img src="https://www.cyanny.com/2020/12/25/structure-learning-algorithm-notears/notears02.jpg" alt="lagrangian equation"></p>
<p>下图是NOTEARS的算法流程</p>
<p><img src="https://www.cyanny.com/2020/12/25/structure-learning-algorithm-notears/notears03.jpg" alt="notears algorithm"></p>
<h1 id="3-NOTEARS算法效果"><a href="#3-NOTEARS算法效果" class="headerlink" title="3.NOTEARS算法效果"></a>3.NOTEARS算法效果</h1><p>作者从ERS, SF4中生成了Node数为20, 样本量为1000和20的数据集, 图表示是邻接矩阵, 可看到学习后的效果和true graph很接近, 效果比Fast Greedy Search(FGS)要好, 同时和Global Optimizer的结果很接近, 准确性好</p>
<p><img src="https://www.cyanny.com/2020/12/25/structure-learning-algorithm-notears/notears04.jpg" alt="notears effect"></p>
<p>继续奋战, 下一波是Bayesian Network ^–^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近三年扎进了AI领域, 学了很多算法, 最近开始真正拉高维度看AI, AI不仅仅是Machine Learning, 还有State Based, Variable Bases, Logic编程等方法. 最近半年看了&lt;strong&gt;The book of Why&lt;/strong&gt;, 深受启发, 看世界的角度也发生很大变化, 同时也觉得因果推理将是一个值得研究的好领域, 就算目前落地场景不多, 相信未来也是大有可为.&lt;/p&gt;
&lt;p&gt;今天静下来, 好好看了在CausalNex库中, 用到的算法NOTEARS, 用于结构学习, 该论文发表在2018的NIPS, 方法神奇, 解决方案简洁, 以下是自己的一些笔记:&lt;/p&gt;
&lt;p&gt;Paper: Zheng, Xun, et al. “DAGs with NO TEARS: Continuous optimization for structure learning.” Advances in Neural Information Processing Systems 31 (2018): 9472-9483.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Causal Inference, AI" scheme="http://example.com/tags/causal-inference-ai/"/>
    
  </entry>
  
  <entry>
    <title>Akka Http Notes</title>
    <link href="http://example.com/2020/09/13/akka-http-notes/"/>
    <id>http://example.com/2020/09/13/akka-http-notes/</id>
    <published>2020-09-13T13:47:31.000Z</published>
    <updated>2020-09-13T14:25:06.054Z</updated>
    
    <content type="html"><![CDATA[<p>在快3年多的Scala项目编程中, Akka是我见过的比较高质量的scala库, 其核心抽象是一种基于Actor的编程模型, 同时在这个核心抽象上, 提供一组工具库, 用户只需要按Actor形式写业务逻辑, 框架会帮你处理好底层的消息传递, 高并发和IO问题. Akka在工业场景下, 很接底气, 比如有很多微服务, 服务的性能各有差异, 这时候你需要整合这些微服务, 完成比如广告投放, 在线推荐, 事故检测等业务, Akka的业务抽象就会有很大的用处.</p>
<p>而最近系统看了Akka-HTTP, 我个人比较喜欢这个库在meta-programming方面的应用, akka-http把一个老生常谈的HTTP库实现的很优雅, 设计和抽象值得推敲, 时间有限, 就看了一周, 以下是一些最近对我帮助比较大的总结, 如果以后有空会继续完善</p>
<h2 id="1-Akka-HTTP-优势"><a href="#1-Akka-HTTP-优势" class="headerlink" title="1.Akka HTTP 优势"></a>1.Akka HTTP 优势</h2><p>定位: 用于处理复杂业务的Library, 不是一个MVC Framework(such as Play)</p>
<ul>
<li>DSL with convenient pathMatchers</li>
<li>Streaming: 流式传输, 速率限制</li>
<li>Interacting with actor easy</li>
</ul>
<a id="more"></a>

<h2 id="2-核心数据结构和抽象"><a href="#2-核心数据结构和抽象" class="headerlink" title="2.核心数据结构和抽象"></a>2.核心数据结构和抽象</h2><ul>
<li>HTTP Module<ul>
<li>HttpRequest<ul>
<li>a method (GET, POST, etc.)</li>
<li>a URI (see URI model for more information)</li>
<li>a seq of headers</li>
<li>an entity (body data): HttpEntity<ul>
<li>HttpEntity类型<ul>
<li>Strict: 消息体小, 内存可放, String or ByteString</li>
<li>Default: Streaming Data Source, know data size</li>
<li>Chunked: unknown length</li>
<li>Multipart.BodyPart: streaming entity, unknown length</li>
</ul>
</li>
<li>大小控制: max-content-length</li>
</ul>
</li>
<li>a protocol</li>
</ul>
</li>
<li>HttpResponse<ul>
<li>a status code</li>
<li>a Seq of headers</li>
<li>an entity (body data)</li>
<li>a protocol</li>
</ul>
</li>
<li>Headers<ul>
<li>content-type: 在HttpEntity中定义</li>
<li>Content-length</li>
<li>User-agent: 自动添加</li>
<li>Date: 自动添加</li>
</ul>
</li>
<li>Other supporting types and tools:<ul>
<li>Uri, HttpMethods, MediaTypes, StatusCodes, Attributes</li>
<li>Parsing/Rendering</li>
</ul>
</li>
</ul>
</li>
<li>URI Module<ul>
<li>model, handling special characters<ul>
<li>foo://example.com:8042/over/there?name=ferret#nose</li>
<li>scheme://authority/path/query?fragment</li>
</ul>
</li>
<li>Extract directives<ul>
<li>Uri.query()</li>
<li>PathDirectives</li>
</ul>
</li>
</ul>
</li>
<li>Marshalling/Unmarshalling<ul>
<li>Marshalling(Serialization/Pickling): Convert high level object to low level wire format<ul>
<li>Function: A =&gt; Future[List[Marshalling[B]]]<ul>
<li>Future: 支持异步</li>
<li>List: 序列化后的对象, 提供多种格式</li>
<li>Marshalling[B]: 可以访问MediaType, HttpCharset这些属性; 延迟Marshalling的调用, 执行content negotiation</li>
</ul>
</li>
<li>常见的Mashallers<ul>
<li>type ToEntityMarshaller[T] = Marshaller[T, MessageEntity]</li>
<li>type ToByteStringMarshaller[T] = Marshaller[T, ByteString]</li>
<li>type ToHeadersAndEntityMarshaller[T] = Marshaller[T, (immutable.Seq[HttpHeader], MessageEntity)]</li>
<li>type ToResponseMarshaller[T] = Marshaller[T, HttpResponse]</li>
<li>type ToRequestMarshaller[T] = Marshaller[T, HttpRequest]</li>
</ul>
</li>
<li>Support Implicit Resolution</li>
</ul>
</li>
<li>Unmarshalling(Deserialization)<ul>
<li>From low level MessageEntity to high level type T</li>
<li>Unmarshaller[A, Future[B]]</li>
<li>Support implicit resolution</li>
</ul>
</li>
<li>Sparay-Json support</li>
</ul>
</li>
</ul>
<h2 id="3-Server-API"><a href="#3-Server-API" class="headerlink" title="3.Server API"></a>3.Server API</h2><ul>
<li>High Level: Routing DSL, content negotiation, static content serving<ul>
<li><a href="https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html">https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html</a></li>
<li>设计思路:<ul>
<li>更可读, 可维护性更好, 可组合, 可扩展的API构建方式</li>
<li>以Directives构建Route Tree</li>
<li>Route Tree可以转换为底层的Flow</li>
</ul>
</li>
<li>Route的接口定义:<ul>
<li>type Route = RequestContext =&gt; Future[RouteResult]<ul>
<li>RequestContext: 提供比HttpRequest更丰富的内容</li>
<li>RouteResult: 是一个ADT(algebraic data type), 一般从RouteDirectives创建(complete, reject, redirect)</li>
</ul>
</li>
<li>Composing Route<ul>
<li>transformation: 代理给inner route处理</li>
<li>filtering: condition and reject</li>
<li>chaining: concat指令, 构建Route Tree, 不建议使用~符号</li>
</ul>
</li>
<li>Sealing a route<ul>
<li>可以返回response的route</li>
</ul>
</li>
</ul>
</li>
<li>Directives是构建route的核心<ul>
<li>创建route<ul>
<li>val route: Route = { ctx =&gt; ctx.complete(“yeah”) }</li>
<li>val route: Route = _.complete(“yeah”)</li>
<li>val route = complete(“yeah”)</li>
</ul>
</li>
<li>其他功能<ul>
<li>Transform/Filter/Extract incoming RequestContext</li>
<li>Chain RouteResult</li>
<li>Complete a request</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-代码重要的模块"><a href="#4-代码重要的模块" class="headerlink" title="4.代码重要的模块"></a>4.代码重要的模块</h2><ul>
<li>Akka-http: High level functionality, dsl, marshalling/unmarshalling</li>
<li>Akka-http-core: low level http protocols</li>
<li>Akka-http-tools<ul>
<li>Akka-http-testkit</li>
<li>Akka-http2-support</li>
<li>Akka-http-spray-json</li>
<li>Akka-http-xml</li>
</ul>
</li>
</ul>
<h2 id="5-执行层"><a href="#5-执行层" class="headerlink" title="5.执行层"></a>5.执行层</h2><ul>
<li>基于akka stream</li>
<li>Timeout<ul>
<li>Client/Server: IdleTimeout: 链接如果一段时间没有request和response</li>
<li>Client:<ul>
<li>akka.http.client.connecting-timeout</li>
<li>akka.http.host-connection-pool.max-connection-lifetime: This timeout configures a maximum amount of time, while the connection can be kept open</li>
</ul>
</li>
<li>Server:<ul>
<li>akka.http.server.request-timeout 20s</li>
<li>akka.http.server.bind-timeout</li>
<li>Linger timeout: server implementation will keep a connection open after all data has been delivered to the network layer</li>
</ul>
</li>
</ul>
</li>
<li>Caching<ul>
<li>Based on caffeine(<a href="https://github.com/ben-manes/caffeine/">https://github.com/ben-manes/caffeine/</a>)</li>
<li>Design Idea:<ul>
<li>避免羊群效应</li>
<li>Cache future</li>
</ul>
</li>
<li>应用: Frequency-biased LFU cache</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在快3年多的Scala项目编程中, Akka是我见过的比较高质量的scala库, 其核心抽象是一种基于Actor的编程模型, 同时在这个核心抽象上, 提供一组工具库, 用户只需要按Actor形式写业务逻辑, 框架会帮你处理好底层的消息传递, 高并发和IO问题. Akka在工业场景下, 很接底气, 比如有很多微服务, 服务的性能各有差异, 这时候你需要整合这些微服务, 完成比如广告投放, 在线推荐, 事故检测等业务, Akka的业务抽象就会有很大的用处.&lt;/p&gt;
&lt;p&gt;而最近系统看了Akka-HTTP, 我个人比较喜欢这个库在meta-programming方面的应用, akka-http把一个老生常谈的HTTP库实现的很优雅, 设计和抽象值得推敲, 时间有限, 就看了一周, 以下是一些最近对我帮助比较大的总结, 如果以后有空会继续完善&lt;/p&gt;
&lt;h2 id=&quot;1-Akka-HTTP-优势&quot;&gt;&lt;a href=&quot;#1-Akka-HTTP-优势&quot; class=&quot;headerlink&quot; title=&quot;1.Akka HTTP 优势&quot;&gt;&lt;/a&gt;1.Akka HTTP 优势&lt;/h2&gt;&lt;p&gt;定位: 用于处理复杂业务的Library, 不是一个MVC Framework(such as Play)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DSL with convenient pathMatchers&lt;/li&gt;
&lt;li&gt;Streaming: 流式传输, 速率限制&lt;/li&gt;
&lt;li&gt;Interacting with actor easy&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Akka, Scala" scheme="http://example.com/tags/akka-scala/"/>
    
  </entry>
  
  <entry>
    <title>Java Performance Toolbox</title>
    <link href="http://example.com/2018/08/04/java-performance-notes-monitoring-tools/"/>
    <id>http://example.com/2018/08/04/java-performance-notes-monitoring-tools/</id>
    <published>2018-08-04T10:24:34.000Z</published>
    <updated>2018-08-09T06:29:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>I learned <strong>The Java Performance Definitive Guide[chapter 3]</strong> on this weekend, here is a brief summary about Java Performance Toolbox.</p>
<h2 id="System-Monitoring-Tools"><a href="#System-Monitoring-Tools" class="headerlink" title="System Monitoring Tools"></a>System Monitoring Tools</h2><h3 id="1-CPU-Usage"><a href="#1-CPU-Usage" class="headerlink" title="1. CPU Usage"></a>1. CPU Usage</h3><p>vmstat: Report virtual memory statistics, vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity<br>vmstat [options] [delay [count]]</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 71322688 314388 127644112    0    0     0     7    0    0  9  1 90  0  0</span><br><span class="line"> 0  0      0 71322816 314388 127644112    0    0     0     0 5590 7874  1  0 99  0  0</span><br><span class="line"> 0  0      0 71322592 314388 127644144    0    0     0     0 5418 7226  0  0 99  0  0</span><br><span class="line"> 0  0      0 71323208 314388 127644144    0    0     0    12 4952 7199  0  0 100  0  0</span><br><span class="line"> 0  0      0 71323600 314388 127644144    0    0     0   104 5253 7262  1  0 99  0  0</span><br></pre></td></tr></table></figure>
<p>Tips:</p>
<ul>
<li>CPU time is the first thing to examine when looking at performance of an application.</li>
<li>The goal in optimizing code is to drive the CPU usage up (for a shorter period of time), not down.</li>
<li>Understand why CPU usage is low before diving in and attempting to tune an application.</li>
</ul>
<h3 id="2-Disk-Usage"><a href="#2-Disk-Usage" class="headerlink" title="2. Disk Usage"></a>2. Disk Usage</h3><p>iostat: Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.</p>
<ul>
<li>%user: Show the percentage of CPU utilization that occurred while executing at the user level (application).</li>
<li>%system: Show the percentage of CPU utilization that occurred while executing at the system level (kernel).</li>
<li>rrqm/s: The number of read requests merged per second that were queued to the device</li>
<li>avgrq-sz: The average size (in sectors) of the requests that were issued to the device</li>
<li>%util: Percentage of elapsed time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iostat -xm 5</span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           9.40    0.00    0.52    0.01    0.00   90.07</span><br><span class="line"></span><br><span class="line">Device:         rrqm&#x2F;s   wrqm&#x2F;s     r&#x2F;s     w&#x2F;s    rMB&#x2F;s    wMB&#x2F;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.58    0.15    4.49     0.00     0.14    61.65     1.31  283.55    0.22  292.90   0.06   0.03</span><br></pre></td></tr></table></figure>
<h3 id="3-Network-Usage"><a href="#3-Network-Usage" class="headerlink" title="3. Network Usage"></a>3. Network Usage</h3></li>
</ul>
<p>netstat: Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -s</span><br></pre></td></tr></table></figure>
<p>The book use <code>nicstat</code>, which is not built-in Linux server, it can be installed by yum.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicstat 5</span><br></pre></td></tr></table></figure>
<p>Be careful that the bandwidth is measured in bits per second, but tools generally report bytes per second</p>
<h2 id="Java-Monitoring-Tools"><a href="#Java-Monitoring-Tools" class="headerlink" title="Java Monitoring Tools"></a>Java Monitoring Tools</h2><h3 id="1-Basic-JVM-INFO"><a href="#1-Basic-JVM-INFO" class="headerlink" title="1. Basic JVM INFO"></a>1. Basic JVM INFO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jcmd process_id VM.uptime</span><br><span class="line">jcmd process_id VM.system_properties</span><br><span class="line">jcmd process_id VM.version</span><br><span class="line">jcmd process_id VM.command_line</span><br><span class="line">jinfo -sysprops process_id</span><br><span class="line">jinfo -flags process_id</span><br><span class="line">jinfo -flag PrintGCDetails process_id</span><br></pre></td></tr></table></figure>
<p>Some tuning flags can be set by jcmd and jinfo in command line, such as manageable options and C2 diagnostic (the flag provides diagnostic output for the compiler engineers to understand how the compiler is functioning).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag -PrintGCDetails process_id  # turns off PrintGCDetails</span><br><span class="line">jinfo -flag PrintGCDetails process_id</span><br></pre></td></tr></table></figure>
<p>tips:</p>
<ul>
<li>jcmd can be used to find the basic VM information—include the value of all the tuning flags—for a running application.</li>
<li>Default flag values can be found by including -XX:+PrintFlagsFinal on a command line. This is useful for determining the default ergonomic settings of flags on a particular platform.</li>
<li>jinfo is useful for inspecting (and in some cases changing) individual flags.</li>
</ul>
<h3 id="2-Thread-Info"><a href="#2-Thread-Info" class="headerlink" title="2. Thread Info"></a>2. Thread Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jstack process_id</span><br><span class="line">jcmd process_id Thread.print</span><br></pre></td></tr></table></figure>
<h3 id="3-Class-Info"><a href="#3-Class-Info" class="headerlink" title="3. Class Info"></a>3. Class Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jconsole</span><br><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure>
<h3 id="4-Heap-Info"><a href="#4-Heap-Info" class="headerlink" title="4. Heap Info"></a>4. Heap Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap process_id</span><br><span class="line">jmap -dump:[live,] format&#x3D;b, file&#x3D;filename process_id</span><br><span class="line">jhat -port 7000 dump_file</span><br></pre></td></tr></table></figure>
<p>Another way, add hprof option to java process</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java -agentlib:hprof&#x3D;help</span><br><span class="line">HPROF: Heap and CPU Profiling Agent (JVMTI Demonstration Code)</span><br><span class="line">hprof usage: java -agentlib:hprof&#x3D;[help]|[&lt;option&gt;&#x3D;&lt;value&gt;, ...]</span><br><span class="line">Option Name and Value  Description                    Default</span><br><span class="line">---------------------  -----------                    -------</span><br><span class="line">heap&#x3D;dump|sites|all    heap profiling                 all</span><br><span class="line">cpu&#x3D;samples|times|old  CPU usage                      off</span><br><span class="line">monitor&#x3D;y|n            monitor contention             n</span><br><span class="line">format&#x3D;a|b             text(txt) or binary output     a</span><br><span class="line">file&#x3D;&lt;file&gt;            write data to file             java.hprof[&#123;.txt&#125;]</span><br><span class="line">net&#x3D;&lt;host&gt;:&lt;port&gt;      send data over a socket        off</span><br><span class="line">depth&#x3D;&lt;size&gt;           stack trace depth              4</span><br><span class="line">interval&#x3D;&lt;ms&gt;          sample interval in ms          10</span><br><span class="line">cutoff&#x3D;&lt;value&gt;         output cutoff point            0.0001</span><br><span class="line">lineno&#x3D;y|n             line number in traces?         y</span><br><span class="line">thread&#x3D;y|n             thread in traces?              n</span><br><span class="line">doe&#x3D;y|n                dump on exit?                  y</span><br><span class="line">msa&#x3D;y|n                Solaris micro state accounting n</span><br><span class="line">force&#x3D;y|n              force output to &lt;file&gt;         y</span><br><span class="line">verbose&#x3D;y|n            print messages about dumps     y</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-agentlib:hprof&#x3D;cpu&#x3D;samples,lineno&#x3D;y # for cpu</span><br><span class="line">-agentlib:hprof&#x3D;heap&#x3D;sites,lineno&#x3D;y # for heap</span><br></pre></td></tr></table></figure>
<p>Some notes:</p>
<ul>
<li>heap=sites, sites is a sorted list of allocation sites.  This identifies the most heavily allocated object types, and the TRACE at which those allocations occurred.</li>
<li>cpu=samples,  is a statistical profile of program execution.  The VM  periodically samples all running threads, and assigns a quantum to active TRACEs in those threads.</li>
<li>cpu=time, is a profile of program execution obtained by measuring the time spent in individual methods (excluding the time spent in callees), as well as by counting the number of times each method is called</li>
</ul>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/samples/hprof.html">hprof ref</a></p>
<h3 id="5-Heap-Dump-Processing"><a href="#5-Heap-Dump-Processing" class="headerlink" title="5. Heap Dump Processing"></a>5. Heap Dump Processing</h3><p>Heap dumps can be captured from the jvisualvm GUI, or from the command line using jcmd or jmap.<br>Or you can use Eclipse Memory Analzyer Tool.</p>
<h2 id="Java-Profiling-Tools"><a href="#Java-Profiling-Tools" class="headerlink" title="Java Profiling Tools"></a>Java Profiling Tools</h2><h3 id="1-Tools-types"><a href="#1-Tools-types" class="headerlink" title="1. Tools types"></a>1. Tools types</h3><ul>
<li><p>Sampling profilers<br>Sampling-based profilers are the most common profiler. There may be error in sampling profiler’s result. The way to minimize these errors is to profile over a longer period of time, and to reduce the time interval between samples.</p>
</li>
<li><p>Instrumented profilers<br>Instrumented profilers yield more information about an application, but can possibly have a greater effect on the application than a sampling profiler.<br>Instrumented profilers should be set up to instrument small sections of the code, a few classes or packages. That limits their impact on the application’s performance.</p>
</li>
</ul>
<h2 id="2-JMC-Java-Mission-Control"><a href="#2-JMC-Java-Mission-Control" class="headerlink" title="2. JMC(Java Mission Control)"></a>2. JMC(Java Mission Control)</h2><p>It’s a great profiling tool built-in JDK(jdk 7 or higher). On local machine, just type <code>jmc</code> command, the jmc UI will show.<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1ftz2nfllbmj21kw0xz4j5.jpg" alt="jmc ui"></p>
<p>Then how to connect jmc to remote Linux server.</p>
<ul>
<li>Firstly, add jmx configurations to Linux java process<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Dcom.sun.management.jmxremote&#x3D;true -Dcom.sun.management.jmxremote.port&#x3D;8091 -Dcom.sun.management.jmxremote.rmi.port&#x3D;8091 -Dcom.sun.management.jmxremote.authenticate&#x3D;false -Dcom.sun.management.jmxremote.ssl&#x3D;false</span><br></pre></td></tr></table></figure></li>
<li>Secondly, config local jmc connection<br>fill the server and port, click Finished. That’s all.<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1ftz2nkhtqvj20sw0pcwis.jpg" alt="config local jmc connection"></li>
</ul>
<p><a href="https://docs.oracle.com/javacomponents/jmc-5-5/jmc-user-guide/toc.htm">jmc help guides</a></p>
<p><em>Use JMC the dump files:</em><br>firstly, add <code>-XX:+UnlockCommercialFeatures -XX:+FlightRecorder</code> to application<br>secondly, type these commands:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jcmd process_id JFR.start</span><br><span class="line">jcmd process_id JFR.dump filename&#x3D;path</span><br><span class="line">jcmd process_id JFR.stop</span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li>System monitoring tools: vmstat, iostat, netstat</li>
<li>Java built-in tools: jinfo, jcmd, jmap, jhat, jstat, jconsole, jvisualvm, jmc, jhprof</li>
<li>No perfert tools for everything, when do profiling work, use right tools right applications</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.amazon.com/Java-Performance-Definitive-Guide-Getting/dp/1449358454/ref=sr_1_1?ie=UTF8&qid=1533475568&sr=8-1&keywords=java+performance+definitive+guide">Java Performance: The Definitive Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I learned &lt;strong&gt;The Java Performance Definitive Guide[chapter 3]&lt;/strong&gt; on this weekend, here is a brief summary about Java Performance Toolbox.&lt;/p&gt;
&lt;h2 id=&quot;System-Monitoring-Tools&quot;&gt;&lt;a href=&quot;#System-Monitoring-Tools&quot; class=&quot;headerlink&quot; title=&quot;System Monitoring Tools&quot;&gt;&lt;/a&gt;System Monitoring Tools&lt;/h2&gt;&lt;h3 id=&quot;1-CPU-Usage&quot;&gt;&lt;a href=&quot;#1-CPU-Usage&quot; class=&quot;headerlink&quot; title=&quot;1. CPU Usage&quot;&gt;&lt;/a&gt;1. CPU Usage&lt;/h3&gt;&lt;p&gt;vmstat: Report virtual memory statistics, vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity&lt;br&gt;vmstat [options] [delay [count]]&lt;/p&gt;
    
    </summary>
    
    
      <category term="java performance" scheme="http://example.com/tags/java-performance/"/>
    
  </entry>
  
  <entry>
    <title>Big Data and ML Learning</title>
    <link href="http://example.com/2018/07/16/big-data-expert/"/>
    <id>http://example.com/2018/07/16/big-data-expert/</id>
    <published>2018-07-16T00:33:12.000Z</published>
    <updated>2018-08-05T13:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着工作的时间一天天过去，不禁会思考对未来的打算，工作的事情更多的是业务和效果，少有时间学习，自我的提升比起学校需要更多的self motivation. 一直都工作在大数据领域，现在虽然业务多些，方向也没有变化，还有了很多机器学习方面的实践。以下是我觉得自己很希望学习的书籍和要点:</p>
<a id="more"></a>

<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li>HBase Definitive Guide</li>
<li>Learning Apache Flink 比起Spark Streaming确实完善很多</li>
<li>Streaming Systems</li>
<li>High Performance Spark</li>
<li>Hadoop Definitive Guide，很早的时候看过一遍</li>
<li>Distributed Computing: Principles, Algorithms, and Systems</li>
<li>Spark源码</li>
<li>Spring Framework，很成熟服务端方案</li>
</ul>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>Hands on ML</li>
<li>Tensorflow官方Guide和源码</li>
<li>DL Learning Coursera</li>
<li>统计推断</li>
<li>数学之美</li>
<li>Coursera ML 课程的作业</li>
<li>Machine Learning: A Probabilistic Perspective</li>
<li>Deep Learning的书</li>
<li>西瓜书</li>
<li>统计学习方法</li>
<li>The elements of statistical learning</li>
<li>Rainforcement Learning</li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li>JVM虚拟机深入: Java Performance: The definitive guide</li>
<li>The C++ Programming Language 4th edition</li>
<li>Java并发编程</li>
<li>Designing Data Intensive Applications</li>
<li>Go programming</li>
<li>R programming</li>
<li>Mondern Operating System</li>
<li>算法，图论, 设计模式，代码大全, 计算机程序的构造与解释</li>
<li>Programming in Scala(review again)</li>
<li>High performance Python</li>
<li>Getting Starting with R</li>
<li>The implementation of functional language</li>
<li>Distributed Computing</li>
<li>Gradle, Maven</li>
<li>代码整洁，代码大全，程序员自我修养，重够</li>
</ul>
<h2 id="投资管理等"><a href="#投资管理等" class="headerlink" title="投资管理等"></a>投资管理等</h2><ul>
<li>经济学原理</li>
<li>心理学</li>
<li>产品：梁宁，听了她的课，学了很多概念，同时也推荐李善友的颠覆式创新</li>
<li>don’t make me think</li>
<li>Just for Fun: The Story of an Accidental Revolutionary</li>
<li>The Hacker Ethic: and the Spirit of the Information Age</li>
</ul>
<p>希望在未来2<del>3年年，能完成，今天年底，完成3</del>4个要点，今年上半年已经完成了<em>Hands on ML</em>，<em>Learning Apache Flink</em> 最近在学习Java Performance，Tensorflow和Deep Learning的Coursera课程，加油啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着工作的时间一天天过去，不禁会思考对未来的打算，工作的事情更多的是业务和效果，少有时间学习，自我的提升比起学校需要更多的self motivation. 一直都工作在大数据领域，现在虽然业务多些，方向也没有变化，还有了很多机器学习方面的实践。以下是我觉得自己很希望学习的书籍和要点:&lt;/p&gt;
    
    </summary>
    
    
      <category term="learning" scheme="http://example.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Books for 2018</title>
    <link href="http://example.com/2018/01/20/great-books-for-2018/"/>
    <id>http://example.com/2018/01/20/great-books-for-2018/</id>
    <published>2018-01-20T07:15:09.000Z</published>
    <updated>2018-01-20T07:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of my 2018 reservations is reading more books. Here I list some great books in my plan.</p>
<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><ul>
<li>Machine Learning: A Probabilistic Perspective</li>
<li>Deap Learning(Ian，Goodfellow)</li>
<li>Pattern Recognition and Machine Learning(Christopher M Bishop)</li>
<li>The elements of statistic learning</li>
<li>Hands-On Machine Learning with Scikit-Learn and TensorFlow (in progress now)</li>
<li>Python Machine Learning</li>
<li>数学之美</li>
<li>统计学（复习）</li>
<li>统计学习方法</li>
<li>机器学习</li>
</ul>
<a id="more"></a>

<h2 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h2><ul>
<li>High Performance Spark(review again)</li>
<li>Spark The Definitive Guide</li>
<li>Kafka The Definitive Guide</li>
<li>Streaming Systems: The What, Where, When, and How of Large-Scale Data Processing</li>
<li>streaming data understanding the real time pipeline</li>
<li>Learning Spark Streaming</li>
<li>Learning Apache Flink</li>
<li>Stream processing with apache flink</li>
<li>Architecting HBase Applications</li>
<li>HBase Definitive Guide</li>
<li>Designing Data-Intensive Applications</li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul>
<li>Programming in Scala(review again)</li>
<li>The C++ Programming Language 4th edition</li>
<li>High performance Python</li>
<li>Getting Starting with R</li>
</ul>
<h2 id="For-my-field"><a href="#For-my-field" class="headerlink" title="For my field"></a>For my field</h2><ul>
<li>Gis Fundamentals</li>
<li>Computing with Spatial Trajectories</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of my 2018 reservations is reading more books. Here I list some great books in my plan.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning&quot;&gt;&lt;a href=&quot;#Machine-Learning&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning&quot;&gt;&lt;/a&gt;Machine Learning&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Machine Learning: A Probabilistic Perspective&lt;/li&gt;
&lt;li&gt;Deap Learning(Ian，Goodfellow)&lt;/li&gt;
&lt;li&gt;Pattern Recognition and Machine Learning(Christopher M Bishop)&lt;/li&gt;
&lt;li&gt;The elements of statistic learning&lt;/li&gt;
&lt;li&gt;Hands-On Machine Learning with Scikit-Learn and TensorFlow (in progress now)&lt;/li&gt;
&lt;li&gt;Python Machine Learning&lt;/li&gt;
&lt;li&gt;数学之美&lt;/li&gt;
&lt;li&gt;统计学（复习）&lt;/li&gt;
&lt;li&gt;统计学习方法&lt;/li&gt;
&lt;li&gt;机器学习&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="learning" scheme="http://example.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Ppmml Publish Today</title>
    <link href="http://example.com/2017/12/29/ppmml-publish/"/>
    <id>http://example.com/2017/12/29/ppmml-publish/</id>
    <published>2017-12-29T11:42:02.000Z</published>
    <updated>2017-12-29T12:16:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>On the last day before the New Year Holiday, ppmml is published.<br><a href="https://github.com/lgrcyanny/ppmml">ppmml</a> is a python library for converting machine learning models to pmml file. ppmml wraps jpmml libraries and provides clean interface.</p>
<h1 id="What-is-pmml-file"><a href="#What-is-pmml-file" class="headerlink" title="What is pmml file?"></a>What is pmml file?</h1><p>PMML - “Predictive Model Markup Language”, which is a standard for XML documents which express trained instances of analytic models.<br>Various platforms adopt pmml as machine learning model standard, including IBM, SAS, Microsoft, Spark, KNIME etd.<a href="http://dmg.org/pmml/products.html">pmml-platforms</a></p>
<p><a href="https://github.com/jpmml">jpmml</a> has developed pmml model library and supported models of spark, xgboost, tensorflow, sklearn, lightgbm and R. All of these libraries are separated and written in java.<br>ppmml wraps jpmml libraries and proved a simple and easy-to-use API for pmml files transformation.<br>0.0.1 version supports sklearn, tensorflow, spark, lightgbm, xgboost and R models. All models supported by jpmml are supported by ppmml. Common machine learning algorithms are supported, such as Decision Tree, Logistic Regression, GBDT, Random Forest, KMeans. However, Deep Learning support is not ready.</p>
<a id="more"></a>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --default-timeout=10000 -i https://pypi.anaconda.org/lgrcyanny/simple ppmml</span><br></pre></td></tr></table></figure>
<p><a href="https://anaconda.org/lgrcyanny/ppmml">ppmml conda package</a></p>
<h1 id="Geting-Started"><a href="#Geting-Started" class="headerlink" title="Geting Started"></a>Geting Started</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> ppmml</span><br><span class="line"><span class="comment"># load data and train iris datasets</span></span><br><span class="line">(X, y) = load_iris(<span class="literal">True</span>)</span><br><span class="line">lr = LogisticRegression(tol=<span class="number">1e-5</span>)</span><br><span class="line">lr.fit(X, y)</span><br><span class="line">joblib.dump(lr, <span class="string">&quot;lr.pkl.z&quot;</span>, compress = <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># to pmml file</span></span><br><span class="line">ppmml.to_pmml(<span class="string">&quot;lr.pkl.z&quot;</span>, <span class="string">&quot;lr.pmml&quot;</span>, model_type=<span class="string">&#x27;sklearn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare test data</span></span><br><span class="line">df = pd.DataFrame(X)</span><br><span class="line">df.columns = [<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>, <span class="string">&#x27;x3&#x27;</span>, <span class="string">&#x27;x4&#x27;</span>]</span><br><span class="line">df.to_csv(<span class="string">&#x27;test.csv&#x27;</span>, header=<span class="literal">True</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># predit with pmml file, a simple predict API based on jpmml-evaluator</span></span><br><span class="line">ppmml.predict(<span class="string">&#x27;lr.pmml&#x27;</span>, <span class="string">&#x27;test.csv&#x27;</span>, <span class="string">&#x27;predict.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/lgrcyanny/ppmml">ppmml github</a></p>
<hr>
<p><strong>Notes:</strong><br>It’s the last work of this year<br>In memory of the last time here, wish for a great step in 2018<br>May the force be with you</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On the last day before the New Year Holiday, ppmml is published.&lt;br&gt;&lt;a href=&quot;https://github.com/lgrcyanny/ppmml&quot;&gt;ppmml&lt;/a&gt; is a python library for converting machine learning models to pmml file. ppmml wraps jpmml libraries and provides clean interface.&lt;/p&gt;
&lt;h1 id=&quot;What-is-pmml-file&quot;&gt;&lt;a href=&quot;#What-is-pmml-file&quot; class=&quot;headerlink&quot; title=&quot;What is pmml file?&quot;&gt;&lt;/a&gt;What is pmml file?&lt;/h1&gt;&lt;p&gt;PMML - “Predictive Model Markup Language”, which is a standard for XML documents which express trained instances of analytic models.&lt;br&gt;Various platforms adopt pmml as machine learning model standard, including IBM, SAS, Microsoft, Spark, KNIME etd.&lt;a href=&quot;http://dmg.org/pmml/products.html&quot;&gt;pmml-platforms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpmml&quot;&gt;jpmml&lt;/a&gt; has developed pmml model library and supported models of spark, xgboost, tensorflow, sklearn, lightgbm and R. All of these libraries are separated and written in java.&lt;br&gt;ppmml wraps jpmml libraries and proved a simple and easy-to-use API for pmml files transformation.&lt;br&gt;0.0.1 version supports sklearn, tensorflow, spark, lightgbm, xgboost and R models. All models supported by jpmml are supported by ppmml. Common machine learning algorithms are supported, such as Decision Tree, Logistic Regression, GBDT, Random Forest, KMeans. However, Deep Learning support is not ready.&lt;/p&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://example.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Scala UDF and UDAF in PySpark</title>
    <link href="http://example.com/2017/09/15/spark-use-scala-udf-udaf-in-pyspark/"/>
    <id>http://example.com/2017/09/15/spark-use-scala-udf-udaf-in-pyspark/</id>
    <published>2017-09-15T03:16:33.000Z</published>
    <updated>2017-09-17T05:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark DataFrame API provides efficient and easy-to-use operations to do analysis on distributed collection of data. Many users love the Pyspark API, which is more usable than scala API. Sometimes when we use UDF in pyspark, the performance will be a problem. How about implementing these UDF in scala, and call them in pyspark? BTW, in spark 2.0, UDAF can only be defined in scala, and how to use it in pyspark? Let’s have a try~</p>
<a id="more"></a>

<h2 id="Use-Scala-UDF-in-PySpark"><a href="#Use-Scala-UDF-in-PySpark" class="headerlink" title="Use Scala UDF in PySpark"></a>Use Scala UDF in PySpark</h2><p><strong>1. define scala udf</strong></p>
<p>Suppose we want to calculate string length, lets define it in scala UDF.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">UserDefinedFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringLength</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStringLength</span></span>(s: <span class="type">String</span>) = s.length</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFun</span></span>(): <span class="type">UserDefinedFunction</span> = udf(getStringLength _)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. use udf in python</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> col</span><br><span class="line"> </span><br><span class="line">spark = SparkSession.builder.appName(<span class="string">&quot;scala_udf_test&quot;</span>).getOrCreate()</span><br><span class="line">sc = spark.sparkContext</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_length</span>(<span class="params">col</span>):</span></span><br><span class="line">    _string_length = sc._jvm.com.learning.StringLength.getFun()</span><br><span class="line">    <span class="keyword">return</span> Column(_string_length.apply(_to_seq(sc, [col], _to_java_column)))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span>():</span></span><br><span class="line">    rows = [</span><br><span class="line">        (<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;dd&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;cc&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;eee&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">    df = spark.createDataFrame(rows, [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    df.show(<span class="number">50</span>)</span><br><span class="line">    df.select(col(<span class="string">&quot;key&quot;</span>), string_length(col(<span class="string">&quot;value&quot;</span>))).show()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    process()</span><br></pre></td></tr></table></figure>
<p><strong>3. submit the app</strong></p>
<p>compile the scala code and submit python files with –jars</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit --jars testing/learning<span class="number">-1.0</span><span class="number">.0</span>-<span class="type">SNAPSHOT</span>.jar udf_test.py</span><br></pre></td></tr></table></figure>
<p>the output would be:</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>k1</td>
<td>3</td>
</tr>
<tr>
<td>k2</td>
<td>2</td>
</tr>
<tr>
<td>k3</td>
<td>2</td>
</tr>
<tr>
<td>k4</td>
<td>3</td>
</tr>
</tbody></table>
<p><strong>4. performance analysis</strong></p>
<p>let’s explain the scala UDF in Python<br><img src="http://wx1.sinaimg.cn/mw690/761b7938ly1fjmeol1jg8j20s405odim.jpg" alt="scala udf physical plan"><br>the Project Plan is Scala UDF</p>
<p>and if we implement Python UDF as follows:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py_slen = udf(<span class="keyword">lambda</span> s: <span class="built_in">len</span>(s), IntegerType())</span><br><span class="line">df_with_python_udf = (df.select(col(<span class="string">&quot;key&quot;</span>), py_slen(<span class="string">&quot;value&quot;</span>).alias(<span class="string">&quot;slen&quot;</span>)).orderBy(col(<span class="string">&quot;slen&quot;</span>).desc()))</span><br></pre></td></tr></table></figure>
<p>the Python plan is:<br><img src="http://wx4.sinaimg.cn/mw690/761b7938ly1fjmeofgzbmj210k06igot.jpg" alt="python udf physical plan"><br>the UDF plan is different, which is BatchEvalPython.<br>It can prove that when use scala UDF in python, the evaluation is in JVM and data will not exchange with Python worker. And the performance should be improved.</p>
<p>I evaluated the performance in local environment with 4cores and 2GB memory, and generated 10million rows for each test, the result is as follows:<br><img src="http://wx2.sinaimg.cn/mw690/761b7938ly1fjmer43xfnj20kw0ckt8z.jpg" alt="scala vs python string len udf"><br><strong>Scala UDF is 1.89 times Python UDF</strong></p>
<p><strong>And then I implemented another UDF in Scala and Python with regex string parsing</strong>, the performance is<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1fjmeopknh4j20a0061748.jpg" alt="scala vs python string regex parsing"></p>
<p><strong>Scala udf is 2.23 times Python REGEX String Parsing UDF</strong></p>
<p>the Scala UDF is defined as follows:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  org.apache.spark.sql.functions._</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Created by lgrcyanny on 17/9/13.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringParse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> <span class="type">STRING_PATTERN</span> = <span class="string">&quot;&quot;</span><span class="string">&quot;(a.*b)&quot;</span><span class="string">&quot;&quot;</span>.r</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parseString</span></span>(str: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> matched = <span class="type">STRING_PATTERN</span>.findFirstMatchIn(str)</span><br><span class="line">    <span class="keyword">if</span> (matched.isEmpty) &#123;</span><br><span class="line">      <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      matched.get.group(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFun</span></span>() = udf(parseString _ )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Python string parse UDF  vs Scala UDF:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> col</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> udf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> length</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> IntegerType</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_word</span>(<span class="params">length</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;get random word for generate rows&quot;&quot;&quot;</span></span><br><span class="line">    letters = string.ascii_lowercase</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(letters) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rows</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;generate rows in key value pair&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># generate rows</span></span><br><span class="line">    letters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">id</span> = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        slen = random.randint(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">        word = random_word(slen)</span><br><span class="line">        rows.append((<span class="built_in">id</span>, letters))</span><br><span class="line">    <span class="keyword">return</span> rows</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_parse</span>(<span class="params">col</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;scala udf parse string&quot;&quot;&quot;</span></span><br><span class="line">    _string_parse = sc._jvm.com.learning.StringParse.getFun()</span><br><span class="line">    <span class="keyword">return</span> Column(_string_parse.apply(_to_seq(sc, [col], _to_java_column)))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_regex_udf</span>(<span class="params">n=<span class="number">1000</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;test udf with regex parse&quot;&quot;&quot;</span></span><br><span class="line">    rows = generate_rows(n)</span><br><span class="line">    df = spark.createDataFrame(rows, [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    df.show(<span class="number">20</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;(a.*b)&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_string</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;parse string with python regex&quot;&quot;&quot;</span></span><br><span class="line">        matched = re.search(pattern, <span class="built_in">str</span>)</span><br><span class="line">        <span class="keyword">if</span> matched:</span><br><span class="line">            <span class="keyword">return</span> matched.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    py_parse_str = udf(parse_string, StringType())</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    df_with_python_udf = (df.select(col(<span class="string">&quot;key&quot;</span>), py_parse_str(col(<span class="string">&quot;value&quot;</span>)).alias(<span class="string">&quot;parsed_value&quot;</span>))</span><br><span class="line">                          .<span class="built_in">filter</span>(length(col(<span class="string">&quot;parsed_value&quot;</span>)) &gt; <span class="number">0</span>))</span><br><span class="line">    df_with_python_udf.explain(<span class="literal">True</span>)</span><br><span class="line">    df_with_python_udf.show()</span><br><span class="line">    print(<span class="string">&quot;matched rows: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(df_with_python_udf.count()))</span><br><span class="line">    print(<span class="string">&quot;duration for python regex parse: &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(time.time() - start_time))</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    df_with_scala_udf = (df.select(col(<span class="string">&quot;key&quot;</span>), string_parse(col(<span class="string">&quot;value&quot;</span>)).alias(<span class="string">&quot;parsed_value&quot;</span>))</span><br><span class="line">                          .<span class="built_in">filter</span>(length(col(<span class="string">&quot;parsed_value&quot;</span>)) &gt; <span class="number">0</span>))</span><br><span class="line">    df_with_python_udf.explain(<span class="literal">True</span>)</span><br><span class="line">    df_with_scala_udf.show()</span><br><span class="line">    print(<span class="string">&quot;matched rows: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(df_with_scala_udf.count()))</span><br><span class="line">    print(<span class="string">&quot;duration for scala regex parse: &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(time.time() - start_time))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>5. Conclusion</strong></p>
<p>Databricks used to give a performance for Python vs Scala DataFrame and RDD API:<br><img src="http://wx2.sinaimg.cn/mw690/761b7938ly1fjmeo7vk38j210c0fy48j.jpg" alt="databricks performance"></p>
<p>the blog is <a href="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html">here</a>.<br>The performance is a running group-aggregation on 10 million integer pairs on a single machince. The Scala DF is almost 5 times Python lambda function in RDD Python.</p>
<p>Even though, the Scala UDF is not 5 times Python UDF, about 2 times in my test, using scala UDF can improve performance indeed.</p>
<h2 id="Use-Scala-UDAF-in-PySpark"><a href="#Use-Scala-UDAF-in-PySpark" class="headerlink" title="Use Scala UDAF in PySpark"></a>Use Scala UDAF in PySpark</h2><p>UDAF now only supports defined in Scala and Java(spark 2.0)</p>
<p><strong>1. define scala UDAF</strong></p>
<p>when define UDAF, it must extend class <code>UserDefinedAggregateFunction</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.&#123;<span class="type">MutableAggregationBuffer</span>, <span class="type">UserDefinedAggregateFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">ArrayType</span>, <span class="type">DataType</span>, <span class="type">StringType</span>, <span class="type">StructType</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GroupConcat</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;s&quot;</span>, <span class="type">StringType</span>)</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;buff&quot;</span>, <span class="type">ArrayType</span>(<span class="type">StringType</span>))</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">StringType</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer.update(<span class="number">0</span>, <span class="type">ArrayBuffer</span>.empty[<span class="type">String</span>])</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.isNullAt(<span class="number">0</span>)) &#123;</span><br><span class="line">      buffer.update(<span class="number">0</span>, buffer.getSeq[<span class="type">String</span>](<span class="number">0</span>) :+ input.getString(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1.update(<span class="number">0</span>, buffer1.getSeq[<span class="type">String</span>](<span class="number">0</span>) ++ buffer2.getSeq[<span class="type">String</span>](<span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getSeq[<span class="type">String</span>](<span class="number">0</span>).mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. use UDAF in python</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</span><br><span class="line"> </span><br><span class="line">spark = SparkSession.builder.appName(<span class="string">&quot;scala_udf_test&quot;</span>).getOrCreate()</span><br><span class="line">sc = spark.sparkContext</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_concat</span>(<span class="params">col</span>):</span></span><br><span class="line">    _groupConcat = sc._jvm.com.learning.GroupConcat.apply</span><br><span class="line">    <span class="keyword">return</span> Column(_groupConcat(_to_seq(sc, [col], _to_java_column)))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span>():</span></span><br><span class="line">    rows = [</span><br><span class="line">        (<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;a&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;b&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;d&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;f&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">    df = spark.createDataFrame(rows, [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    df.show(<span class="number">50</span>)</span><br><span class="line">    df.groupBy(<span class="string">&quot;key&quot;</span>).agg(group_concat(<span class="string">&quot;value&quot;</span>).alias(<span class="string">&quot;concat&quot;</span>)).show()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    process()</span><br></pre></td></tr></table></figure>
<p><strong>3. submit the app</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;spark-submit --jars testing&#x2F;learning-1.0.0-SNAPSHOT.jar udf_test.py</span><br></pre></td></tr></table></figure>
<p>the output would be:</p>
<table>
<thead>
<tr>
<th>key</th>
<th>cancat</th>
</tr>
</thead>
<tbody><tr>
<td>k1</td>
<td>a,b,c</td>
</tr>
<tr>
<td>k2</td>
<td>d</td>
</tr>
<tr>
<td>k3</td>
<td>e,f</td>
</tr>
</tbody></table>
<p><strong>4. references</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/31640729/spark-sql-replacement-for-mysql-group-concat-aggregate-function">spark-sql-replacement-for-mysql-group-concat-aggregate-function</a></li>
<li><a href="https://stackoverflow.com/questions/33233737/spark-how-to-map-python-with-scala-or-java-user-defined-functions">spark-how-to-map-python-with-scala-or-java-user-defined-functions</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark DataFrame API provides efficient and easy-to-use operations to do analysis on distributed collection of data. Many users love the Pyspark API, which is more usable than scala API. Sometimes when we use UDF in pyspark, the performance will be a problem. How about implementing these UDF in scala, and call them in pyspark? BTW, in spark 2.0, UDAF can only be defined in scala, and how to use it in pyspark? Let’s have a try~&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://example.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>My First Commit to Spark Community</title>
    <link href="http://example.com/2017/08/30/my-first-commit-to-spark-community/"/>
    <id>http://example.com/2017/08/30/my-first-commit-to-spark-community/</id>
    <published>2017-08-30T01:50:37.000Z</published>
    <updated>2017-08-30T07:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been worked on spark related projects for almost 2 years. Today I submit a small patch to spark community. Hope to be a contributor~<br><a href="https://issues.apache.org/jira/browse/SPARK-21859">https://issues.apache.org/jira/browse/SPARK-21859</a></p>
<a id="more"></a>
<p>It’s a PR about SparkFiles.get problem on yarn. Event though it’s a small patch, it’s a big progress for me to be an open source contributor.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been worked on spark related projects for almost 2 years. Today I submit a small patch to spark community. Hope to be a contributor~&lt;br&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-21859&quot;&gt;https://issues.apache.org/jira/browse/SPARK-21859&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spark" scheme="http://example.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming Exactly-Once Analysis</title>
    <link href="http://example.com/2017/08/27/spark-streaming-exactly-once-analysis/"/>
    <id>http://example.com/2017/08/27/spark-streaming-exactly-once-analysis/</id>
    <published>2017-08-27T03:31:58.000Z</published>
    <updated>2017-10-24T07:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近对Spark Streaming接触比较多，主要关注的是streaming的准确性方面的需求, 忙了快半年，不禁想问为什么需要在exactly-once上花费这么多时间呢。streaming和batch的处理逻辑有什么区别呢？我觉得streaming更适合一些简单的过滤，能在100ms以内能算完的逻辑，而这些逻辑用batch也可以算完，为什么要streaming呢？用户们更希望的是更快。如果batch也能满足低延迟的需求，streaming系统就不需要了。而问题是为什么我们需要一个单独的streaming系统？</p>
<a id="more"></a>

<p> 生产环境中的版本是1.6，spark streaming的API在1.6上是基于RDD的DStream API，相比Structured Streaming，更稳定和成熟些。而我们的用户们，比较关心的是streaming系统</p>
<p> 开源里广泛使用的Streaming系统是Storm和Flink。Storm早期用record ack的方式保证at-least once，但没有提供exactly-once的保证，后面又有了storm trident.</p>
<h2 id="Spark-Streaming-Receiver模式没有exactly-once保证"><a href="#Spark-Streaming-Receiver模式没有exactly-once保证" class="headerlink" title="Spark Streaming Receiver模式没有exactly-once保证"></a>Spark Streaming Receiver模式没有exactly-once保证</h2><h2 id="Flink中的Exactly-Once保证"><a href="#Flink中的Exactly-Once保证" class="headerlink" title="Flink中的Exactly-Once保证"></a>Flink中的Exactly-Once保证</h2><h2 id="Storm的Eactly-Once保证"><a href="#Storm的Eactly-Once保证" class="headerlink" title="Storm的Eactly-Once保证"></a>Storm的Eactly-Once保证</h2><h3 id="Storm-Architecture"><a href="#Storm-Architecture" class="headerlink" title="Storm Architecture"></a>Storm Architecture</h3><p><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1fizgwunfr6j21kw0n7e6n.jpg" alt="storm architecture"><br>以Storm on Yarn来说明Storm的架构：</p>
<ul>
<li>client将jar包通过yarn上传</li>
<li>在一台NodeManager上启动Nimbus，这是master节点，负责管理StormTopology, 分发task，心跳等</li>
<li>其他的NodeManager上启动Supervisor, 相当于slave节点，管理storm worker<ul>
<li> 在每个supervisor上，可以启动多个worker进程，每个worker进程可以运行多个task，task是多线程的，由worker管理。这些task运行的就是Spout或Bolt定义的操作</li>
</ul>
</li>
<li> Zookeeper, Storm运行时状态的管理</li>
</ul>
<p>Storm方面算是简单调研，理解不是很深入，具体的参考<a href="http://storm.apache.org/releases/1.1.1/Setting-up-a-Storm-cluster.html">官方文档</a></p>
<h3 id="Storm-exactly-once"><a href="#Storm-exactly-once" class="headerlink" title="Storm exactly-once"></a>Storm exactly-once</h3><p>####1. Storm Transactional Topologies(deprecated)<br>Strom 0.7版本中，实现了<a href="http://storm.apache.org/releases/1.1.1/Transactional-topologies.html">transctional topologies</a>来保证exactly-once,<br><strong>1.transactional phrases 类似两阶段事务机制</strong></p>
<ul>
<li>The processing phase: this is the phase that can be done in parallel for many batches 可以并发执行计算partial result</li>
<li>The commit phase: The commit phases for batches are strongly ordered. So the commit for batch 2 is not done until the commit for batch 1 has been successful. 保证batch的提交是按顺序的</li>
</ul>
<p>来个直观的，用户需要构建的Topology如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MemoryTransactionalSpout spout = <span class="keyword">new</span> MemoryTransactionalSpout(DATA, <span class="keyword">new</span> Fields(<span class="string">&quot;word&quot;</span>), PARTITION_TAKE_PER_BATCH);</span><br><span class="line">TransactionalTopologyBuilder builder = <span class="keyword">new</span> TransactionalTopologyBuilder(<span class="string">&quot;global-count&quot;</span>, <span class="string">&quot;spout&quot;</span>, spout, <span class="number">3</span>);</span><br><span class="line">builder.setBolt(<span class="string">&quot;partial-count&quot;</span>, <span class="keyword">new</span> BatchCount(), <span class="number">5</span>)</span><br><span class="line">        .shuffleGrouping(<span class="string">&quot;spout&quot;</span>);</span><br><span class="line">builder.setBolt(<span class="string">&quot;sum&quot;</span>, <span class="keyword">new</span> UpdateGlobalCount())</span><br><span class="line">        .globalGrouping(<span class="string">&quot;partial-count&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>2.关键点</strong></p>
<ul>
<li>一个拓扑里只有一个Transactional Spout，其实现是由一个单线程的Coordinator Spout + 多个Emitter Bolt组成。利用Storm的ACK Framework机制，判断一个batch是否执行完成</li>
<li>Committer Bolt 可以有多个，需要收到Transactional Spout的commit信息才会执行commit</li>
</ul>
<p>####2. Storm Trident Topologies<br>storm 1.1的版本中，引入新的Trident API解决exactly-once，这是transactional topologies的升级版本。API的易用性改善，exactly-once也是采用事务机制</p>
<p><strong>1.exactly once</strong></p>
<ul>
<li>Tuples are processed as small batches 采用micor-batch机制</li>
<li>Each batch of tuples is given a unique id called the “transaction id” (txid). If the batch is replayed, it is given the exact same txid. 每个batch有唯一的batchid</li>
<li>State updates are ordered among batches. That is, the state updates for batch 3 won’t be applied until the state updates for batch 2 have succeeded. 按txid顺序提交</li>
</ul>
<p><strong>2.trident example</strong><br><a href="https://github.com/lgrcyanny/LearningStorm/blob/master/src/main/scala/com/learning/storm/TridentTest.scala">github example</a></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> topology = <span class="keyword">new</span> <span class="type">TridentTopology</span>()</span><br><span class="line"><span class="comment">// define spout</span></span><br><span class="line"><span class="keyword">val</span> spout = <span class="keyword">new</span> <span class="type">FixedBatchSpout</span>(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">&quot;sentence&quot;</span>), <span class="number">3</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">&quot;the cow jumped over the moon&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">&quot;the man went to the store and bought some candy&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">&quot;four score and seven years ago&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">&quot;how many apples can you eat&quot;</span>))</span><br><span class="line">  spout.setCycle(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> wordsCount: <span class="type">TridentState</span> = topology.newStream(<span class="string">&quot;wordsSpout&quot;</span>, spout)</span><br><span class="line">    .each(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">&quot;sentence&quot;</span>), <span class="keyword">new</span> <span class="type">Split</span>(), <span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">&quot;word&quot;</span>))</span><br><span class="line">    .groupBy(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">&quot;word&quot;</span>))</span><br><span class="line">    .persistentAggregate(<span class="keyword">new</span> <span class="type">MemoryMapState</span>.<span class="type">Factory</span>(), <span class="keyword">new</span> <span class="type">Count</span>(), <span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">&quot;count&quot;</span>))</span><br><span class="line">    .parallelismHint(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>###<strong>总结</strong></p>
<p>Storm里为了exacly once，需要做到：</p>
<ul>
<li>源端可重放</li>
<li>batch要有唯一的txid</li>
<li>commit时按顺序提交，类似事务的两阶段提交</li>
</ul>
<hr>







]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对Spark Streaming接触比较多，主要关注的是streaming的准确性方面的需求, 忙了快半年，不禁想问为什么需要在exactly-once上花费这么多时间呢。streaming和batch的处理逻辑有什么区别呢？我觉得streaming更适合一些简单的过滤，能在100ms以内能算完的逻辑，而这些逻辑用batch也可以算完，为什么要streaming呢？用户们更希望的是更快。如果batch也能满足低延迟的需求，streaming系统就不需要了。而问题是为什么我们需要一个单独的streaming系统？&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark streaming" scheme="http://example.com/tags/spark-streaming/"/>
    
  </entry>
  
  <entry>
    <title>Set Up Apache Storm on Mac in 10min</title>
    <link href="http://example.com/2017/04/10/set-up-storm-on-mac-in-10min/"/>
    <id>http://example.com/2017/04/10/set-up-storm-on-mac-in-10min/</id>
    <published>2017-04-10T12:19:23.000Z</published>
    <updated>2017-04-10T12:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Storm is a great real time streaming system. Recently, my project is about spark streaming. I want to learn storm either to know more about streaming system. Okay, let’s fire up.<br>Today I tried to install storm cluster on my local mac.<br>It was easy to install. It will cost you about 10min.</p>
<a id="more"></a>

<h2 id="1-install-zookeeper"><a href="#1-install-zookeeper" class="headerlink" title="1. install zookeeper"></a>1. install zookeeper</h2><ul>
<li>download <a href="http://www.apache.org/dyn/closer.cgi/zookeeper/">zookeeper-3.4.9</a></li>
<li>configure conf/zoo.cfg as follows:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that the initial</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that can pass between</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> replace it as your <span class="built_in">local</span> dir</span></span><br><span class="line">dataDir=/Users/lgrcyanny/Codelab/zookeeper/zookeeper-3.4.9/zkdata</span><br><span class="line"><span class="meta">#</span><span class="bash"> the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>
<h2 id="2-install-storm"><a href="#2-install-storm" class="headerlink" title="2. install storm"></a>2. install storm</h2><ul>
<li>download <a href="http://storm.apache.org/downloads.html">latest storm 1.1.0</a></li>
<li>configure conf/storm.yaml as follows:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">storm.zookeeper.servers:</span><br><span class="line">    - &quot;localhost&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">storm.zookeeper.port:2181</span></span><br><span class="line"></span><br><span class="line">storm.local.dir: &quot;/Users/lgrcyanny/Codelab/storm/apache-storm-1.1.0/storm-local&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># nimbus.seeds: [&quot;host1&quot;, &quot;host2&quot;, &quot;host3&quot;]</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">nimbus.seeds: [<span class="string">&quot;localhost&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">supervisor.slots.ports:</span><br><span class="line">    - 6700</span><br><span class="line">    - 6701</span><br><span class="line">    - 6702</span><br><span class="line">    - 6703</span><br></pre></td></tr></table></figure>
<p>to understand these config, please refer to: <a href="http://storm.apache.org/releases/1.1.0/Setting-up-a-Storm-cluster.html">Setting-up-a-Storm-cluster.html</a></p>
<h2 id="3-start-stom"><a href="#3-start-stom" class="headerlink" title="3. start stom"></a>3. start stom</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> start nimbus</span></span><br><span class="line">./bin/storm nimbus</span><br><span class="line"><span class="meta">#</span><span class="bash"> start supervisor <span class="keyword">for</span> workers</span></span><br><span class="line">./bin/storm supervisor</span><br><span class="line"><span class="meta">#</span><span class="bash"> start ui</span></span><br><span class="line">./bin/storm ui</span><br></pre></td></tr></table></figure>
<p>open <a href="http://localhost:8080/">http://localhost:8080</a>, you will see storm started:<br><img src="http://wx1.sinaimg.cn/large/761b7938ly1fehv2miunpj21kw0ps0we.jpg" alt="start storm"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Storm is a great real time streaming system. Recently, my project is about spark streaming. I want to learn storm either to know more about streaming system. Okay, let’s fire up.&lt;br&gt;Today I tried to install storm cluster on my local mac.&lt;br&gt;It was easy to install. It will cost you about 10min.&lt;/p&gt;
    
    </summary>
    
    
      <category term="apache storm" scheme="http://example.com/tags/apache-storm/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Logistic Regression</title>
    <link href="http://example.com/2017/03/25/machine-learning-logistic-regression/"/>
    <id>http://example.com/2017/03/25/machine-learning-logistic-regression/</id>
    <published>2017-03-25T13:48:51.000Z</published>
    <updated>2017-03-25T07:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logistic Regression is for classification problem, and the predication value is fixed descrete values, such as 1 for positive or 0 for negative. The essence of logistic regression is:</p>
<ul>
<li>hypothesis function is sigmoid function</li>
<li>cost function: J(theta)</li>
<li>gradient descent and algorithms</li>
<li>advantanced optimization with regularization to solve overfitting problem.<a id="more"></a>
<h2 id="Basics-about-logistic-regression"><a href="#Basics-about-logistic-regression" class="headerlink" title="Basics about logistic regression"></a>Basics about logistic regression</h2>hypothesis function = 1 / (1 + exp(-htheta(x))),<br>where htheta(x) = theta’ * x(theta’ is transpose theta)<br><img src="http://ww2.sinaimg.cn/mw690/761b7938jw1f2rxxio8x0j20v80nit9x.jpg" alt="Sigmoid Function or Logistic Function"><br>htheta(x) mean <strong>Probalitiy that y=1, given x parameterized by theta P(y=1 | x; theta)</strong>,<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> htheta(x) &gt;= <span class="number">0.5</span>, then y = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> htheta(x) &lt; <span class="number">0.5</span>, then y = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Descision-Boundary"><a href="#Descision-Boundary" class="headerlink" title="Descision Boundary"></a>Descision Boundary</h2><img src="http://ww3.sinaimg.cn/mw690/761b7938jw1f2rxxhyf4ij20v00ngtbs.jpg" alt="descision boundary"><br>Our goal is the calculate theta, can classify our traing data with descision boundary.<br>In the example, the traning data can be classified into 2 categories by a straight line.<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (theta&#x27;x) &gt;= <span class="number">0</span>, then htheta(x) &gt;= <span class="number">0.5</span>, then y = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (theta&#x27;x) &lt; <span class="number">0</span>, then htheta(x) &lt; <span class="number">0.5</span>, then y = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="Cost-function-implementation"><a href="#Cost-function-implementation" class="headerlink" title="Cost function implementation"></a>Cost function implementation</h2>For the assignment of week3, predicate the adimission by university with 2 exams grade data.<br>I optimize the implementation with vectoriaztion</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">costFunction</span><span class="params">(theta, X, y)</span></span></span><br><span class="line"><span class="comment">%COSTFUNCTION Compute cost and gradient for logistic regression</span></span><br><span class="line"><span class="comment">%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the</span></span><br><span class="line"><span class="comment">%   parameter for logistic regression and the gradient of the cost</span></span><br><span class="line"><span class="comment">%   w.r.t. to the parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize some useful values</span></span><br><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly</span></span><br><span class="line">J = <span class="number">0</span>;</span><br><span class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</span><br><span class="line"></span><br><span class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></span><br><span class="line"><span class="comment">% Instructions: Compute the cost of a particular choice of theta.</span></span><br><span class="line"><span class="comment">%               You should set J to the cost.</span></span><br><span class="line"><span class="comment">%               Compute the partial derivatives and set grad to the partial</span></span><br><span class="line"><span class="comment">%               derivatives of the cost w.r.t. each parameter in theta</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Note: grad should have the same dimensions as theta</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Predications: h_theta(x)</span></span><br><span class="line">predications = sigmoid(X * theta);</span><br><span class="line">cost_items = y .* <span class="built_in">log</span>(predications) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - predications);</span><br><span class="line">J = (<span class="number">-1</span> / m) * sum(cost_items);</span><br><span class="line"></span><br><span class="line">grad = (<span class="number">1</span> / m) * (X&#x27; * (hypothesis - y));</span><br><span class="line"></span><br><span class="line"><span class="comment">% =============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="Cost-function-with-regularization"><a href="#Cost-function-with-regularization" class="headerlink" title="Cost function with regularization"></a>Cost function with regularization</h2><p>Regularzation is for overfitting problem.</p>
<ul>
<li>underfit: not fit the training data, with high bias between predications and actual value</li>
<li>Just Right: great fit</li>
<li>Overfitting:  often with too many features, not so much traning data, fit traing data well, but with hight variance, predict new data not very well</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">costFunctionReg</span><span class="params">(theta, X, y, lambda)</span></span></span><br><span class="line"><span class="comment">%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization</span></span><br><span class="line"><span class="comment">%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using</span></span><br><span class="line"><span class="comment">%   theta as the parameter for regularized logistic regression and the</span></span><br><span class="line"><span class="comment">%   gradient of the cost w.r.t. to the parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize some useful values</span></span><br><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly</span></span><br><span class="line">J = <span class="number">0</span>;</span><br><span class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</span><br><span class="line"></span><br><span class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></span><br><span class="line"><span class="comment">% Instructions: Compute the cost of a particular choice of theta.</span></span><br><span class="line"><span class="comment">%               You should set J to the cost.</span></span><br><span class="line"><span class="comment">%               Compute the partial derivatives and set grad to the partial</span></span><br><span class="line"><span class="comment">%               derivatives of the cost w.r.t. each parameter in theta</span></span><br><span class="line">hypothesis = sigmoid(X * theta);</span><br><span class="line">cost_items = (y .* <span class="built_in">log</span>(hypothesis)) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - hypothesis);</span><br><span class="line"><span class="comment">% don&#x27;t penalize theta0</span></span><br><span class="line">reg_theta = [<span class="number">0</span>; theta(<span class="number">2</span>:<span class="built_in">length</span>(theta))];</span><br><span class="line">J = (<span class="number">-1</span> / m) * sum(cost_items) + (lambda / (<span class="number">2</span> * m)) * sum(reg_theta .^ <span class="number">2</span>);</span><br><span class="line"><span class="comment">%grad = (1 / m) * sum((predications - y) .* X)&#x27; + (lambda / m) * penalize_theta;</span></span><br><span class="line">grad = (<span class="number">1</span> / m) * (X&#x27; * (hypothesis - y)) + (lambda / m) * reg_theta;</span><br><span class="line"></span><br><span class="line"><span class="comment">% =============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>the lambda for regularization can’t be too large:</p>
<ul>
<li>large lamba will got very small theta value, and underfit.</li>
<li>small lambda will got large theta velue, and overfit.</li>
<li>the lambda for the exerise is 1</li>
</ul>
<h2 id="Github-assignments"><a href="#Github-assignments" class="headerlink" title="Github assignments"></a>Github assignments</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments/ex2-logistic-regression">Week 3 Assignments</a></p>
<h2 id="Write-on-the-last"><a href="#Write-on-the-last" class="headerlink" title="Write on the last"></a>Write on the last</h2><p>After one year, I learn the logistic regression again. Last week, Andrew NG left Baidu. Maybe, these great people thought Baidu is not worth to fight for. Now I still decidated on a Spark project and focus on Spark Streaming. As team leader, I am bearing a great burden and is stressful. It’s a great chance to train my leadership. I am also wondering next opportunity. Learning Machine Learning is right and worth to do. Anyway, even though mist is on the path, just go forward and fight~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logistic Regression is for classification problem, and the predication value is fixed descrete values, such as 1 for positive or 0 for negative. The essence of logistic regression is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hypothesis function is sigmoid function&lt;/li&gt;
&lt;li&gt;cost function: J(theta)&lt;/li&gt;
&lt;li&gt;gradient descent and algorithms&lt;/li&gt;
&lt;li&gt;advantanced optimization with regularization to solve overfitting problem.&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://example.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search Algorithm in Scala</title>
    <link href="http://example.com/2017/02/21/binary-search-algorithm/"/>
    <id>http://example.com/2017/02/21/binary-search-algorithm/</id>
    <published>2017-02-21T01:29:49.000Z</published>
    <updated>2021-01-10T05:49:08.892Z</updated>
    
    <content type="html"><![CDATA[<p>One day, I wanted to use binary search in one of my feature in my project. My friend said the algorithm was not easy to implement bug free. I did’t believe that. I spent 10min to write it.</p>
<a id="more"></a>

<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(list: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">   <span class="keyword">if</span> (start &lt;= end) &#123;</span><br><span class="line">     <span class="keyword">val</span> middle = (end - start) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (list(middle) == x) &#123;</span><br><span class="line">       <span class="type">Some</span>(middle)</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list(middle) &gt; x) &#123;</span><br><span class="line">       search(list, middle + <span class="number">1</span>, end, x)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       search(list, start, middle - <span class="number">1</span>, x)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="type">None</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="keyword">val</span> list = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">   println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Ooh, definitly my code has bug, yes I admitted that it was not very easy to implement binary search bug free.<br>I revised it.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(list: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &lt;= end) &#123;</span><br><span class="line">      <span class="keyword">val</span> middle = (end - start) / <span class="number">2</span> + start <span class="comment">// bug 1, without plus start</span></span><br><span class="line">      <span class="keyword">if</span> (list(middle) == x) &#123;</span><br><span class="line">        <span class="type">Some</span>(middle)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list(middle) &gt; x) &#123;   <span class="comment">// bug2, when middle bigger than x, not search middle+1,end</span></span><br><span class="line">        search(list, start, middle - <span class="number">1</span>, x)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        search(list, middle + <span class="number">1</span>, end, x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">8</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">Some(4)</span><br><span class="line">None</span><br><span class="line">Some(7)</span><br></pre></td></tr></table></figure>
<p>It was an interesting problem. I should tain my programming skills more.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One day, I wanted to use binary search in one of my feature in my project. My friend said the algorithm was not easy to implement bug free. I did’t believe that. I spent 10min to write it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>My Booklist and Reservations for 2017</title>
    <link href="http://example.com/2017/01/22/booklist-for-2017/"/>
    <id>http://example.com/2017/01/22/booklist-for-2017/</id>
    <published>2017-01-22T02:18:09.000Z</published>
    <updated>2017-03-05T02:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直没有写关于2016的回顾，有很多方面吧。2016年发生很多事儿的一年，对于技术上的发展也有了新的思考，搞技术不再是死磕某种工具、算法或bug，其实本质上是为了解决问题或者做更好的产品。虽然我做的不是具体的产品而是底层的工具和平台，但这些工具的出口也是依赖”pillar application”, 多想想也是好处的。</p>
<p>2016工作忙，读的书没有很多，但想想扎克伯克比我们还忙一年能挑战23本书确实很牛，其实自己的时间管理是不太到位的，大部分周末都懒散睡觉或者出去逛街了，回归2016年，读的书们：<a id="more"></a></p>
<ul>
<li><strong>“Programming in scala, 2nd”</strong></li>
</ul>
<p>第一次啃一本大部头英文书883页，我都没有勇气打印出来，看的电子版，目前2017年初，走到第703页，成功在望。看完这个书，对scala的理解和应用，已经超过我的C++和Java技能了</p>
<ul>
<li><strong>Spark源码解析, 许鹏著</strong></li>
</ul>
<p>如果你问我学spark该看哪本书，我不会给你推荐这个的。不是说它不好，而是应该好好看官方doc. 不过这个书对我理解spark还是带来了很大帮助，但是spark1.0系列的，只能对着spark1.6和spark2.0的源码看，然后看看当年的大神们怎么设计的。许鹏的书里贴了一些关键代码，虽然贴代码占页数有点不厚道，但书叫源码解析所以也就忍了</p>
<ul>
<li><strong>Python Tutorial</strong></li>
</ul>
<p>我想学python很久了，这个Tutorial我看了好多遍，其实真正到实际应用中，我才真正学会了python</p>
<ul>
<li><strong>深入理解Java虚拟机</strong></li>
</ul>
<p>JVM的虚拟机调优部分看了，还有很多没看完，用到再查</p>
<ul>
<li><strong>spark的各种论文，PPT等</strong></li>
</ul>
<p>论文比较分散，有spark sql, spark rdd, spark streaming等，各种PPT也比较分散</p>
<ul>
<li><strong>人间词话</strong></li>
</ul>
<p>有时候看看诗，心里很开心。比如年终遇到一些事儿的时候喜欢一句诗：”天长水阔知何处”，心里那个纠结</p>
<ul>
<li><strong>Dunes: 沙丘，英文版</strong></li>
</ul>
<p>科幻大神的书，挑战了英文文学，虽然磕磕绊绊看完了，但现在我可以自信的看完大部头的英文原版文学书啦。之前看过英文的哈利波特，安德游戏，觉得比较幼稚没看下去。沙丘是比较对我胃口的一本</p>
<ul>
<li><strong>倚天屠龙记</strong></li>
</ul>
<p>我童年在教科书和教辅中度过，这么好的书这么大了才看，真心停不下来</p>
<ul>
<li><strong>百万富翁，Mark Twain, 英文版</strong></li>
</ul>
<p>喜欢反转的剧情，喜欢Mark Twain的文笔</p>
<ul>
<li><strong>各种博客，news</strong></li>
</ul>
<p>我手机里有将近30个news app，我是多爱看news，喜欢的包括Business Insider, Hack News, QZ.com, 36氪，钛媒体，推酷等，一般好的news分析我放到pocket里。当然还喜欢听喜马拉雅的段子。再觉得其实看news没有看书好，多看书好</p>
<p>2017年啦，上面还有programming in scala, 人间词话还没看完，新的书又来啦，虽然写打算我不一定看，但列一下我的打算吧：</p>
<ul>
<li>机器学习Coursera课程</li>
</ul>
<p>机器学习，AI这么火，我2017年要把这个课程学完</p>
<ul>
<li>Creativity, Inc. Overcoming the Unseen Forces That Stand in the Way of True Inspiration</li>
<li>从0到1</li>
<li>make users awesome</li>
<li>platform revolution</li>
<li>奇点系列：<a href="https://book.douban.com/series/27014">https://book.douban.com/series/27014</a></li>
<li>各种科幻和悬疑发现中</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直没有写关于2016的回顾，有很多方面吧。2016年发生很多事儿的一年，对于技术上的发展也有了新的思考，搞技术不再是死磕某种工具、算法或bug，其实本质上是为了解决问题或者做更好的产品。虽然我做的不是具体的产品而是底层的工具和平台，但这些工具的出口也是依赖”pillar application”, 多想想也是好处的。&lt;/p&gt;
&lt;p&gt;2016工作忙，读的书没有很多，但想想扎克伯克比我们还忙一年能挑战23本书确实很牛，其实自己的时间管理是不太到位的，大部分周末都懒散睡觉或者出去逛街了，回归2016年，读的书们：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Learning" scheme="http://example.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Scala Collections</title>
    <link href="http://example.com/2016/11/07/scala-collections/"/>
    <id>http://example.com/2016/11/07/scala-collections/</id>
    <published>2016-11-07T02:09:10.000Z</published>
    <updated>2017-03-05T02:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>In scala there are many fancy collections with great utilities. Here are some key notes for scala collections which did a great help to me.</p>
<a id="more"></a>

<h1 id="Collections-Hierarchy"><a href="#Collections-Hierarchy" class="headerlink" title="Collections Hierarchy"></a>Collections Hierarchy</h1><p><img src="http://ww1.sinaimg.cn/mw1024/761b7938jw1f9jbrdeugkj20ku0q041j.jpg" alt="collection hierarchy"></p>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Collections have two kinds:</p>
<pre><code>- mutable collections
- immutable collections</code></pre>
<h2 id="Immutable-Collections"><a href="#Immutable-Collections" class="headerlink" title="Immutable Collections"></a>Immutable Collections</h2><ul>
<li><p>Lists are finite immutable sequences. They provide constant-time access to their first element as well as the rest of the list</p>
</li>
<li><p>A stream is like a list except that its elements are computed lazily. Because of this, a stream can be infinitely long. for example:</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="number">1</span> #:: <span class="number">2</span> #:: <span class="number">3</span> #:: <span class="type">Stream</span>.empty</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span></span>(m: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Stream</span>[<span class="type">Int</span>] = m #:: fib(n, m + n)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Vectors are a new collection type in Scala 2.8 that give efficient access to elements beyond the head.</p>
<ul>
<li>Access to any elements of a vector take only “effectively constant time,” as defined below.</li>
<li>shallow trees</li>
<li>when only one level, store 32 elements in an array</li>
<li>if lager than 32, grow to 2 levels, each node in level 2 has 32 elements, and level 1 store 32 pointers, now level 2 has 2^10 elements</li>
<li>level 3 has 2^ 15 elements</li>
<li>to access an element, the complexity is log32(N)</li>
<li>Vector have very decent random access performance</li>
<li>The default implementation to immutable IndexedSeq</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>first-in-last-out</li>
<li>you can use ArrayBuffer to implement a Stack<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emtpyStack = <span class="type">Stack</span>.empty</span><br><span class="line"><span class="keyword">val</span> hasOne = emptyStack.push(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Immutable queues</p>
</li>
<li><p>Ranges</p>
  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">1</span> to <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>Hash Tries</p>
<ul>
<li>Hash tries4 are a standard way to implement immutable sets and maps efficiently.</li>
</ul>
</li>
<li><p>RedBlackTrees</p>
<ul>
<li>Red-black trees are a form of balanced binary trees where some nodes are designated “red” and others “black.”</li>
<li>TreeSet</li>
<li>TreeMap</li>
<li>default implementation for SortedSet</li>
</ul>
</li>
<li><p>Immutable bit sets<br><img src="http://ww2.sinaimg.cn/mw690/761b7938jw1f9jc4ydow0j20r208276p.jpg" alt="bit set example"></p>
<ul>
<li>Operations on bit sets are very fast. Testing for inclusion takes constant time. Adding an item to the set takes time proportional to the number of Longs in the bit set’s array, which is typically a small number.</li>
</ul>
</li>
<li><p>ListMap</p>
<ul>
<li> The only possible difference is if the map is for some reason constructed in such a way that the first elements in the list are selected much more often than the other elements.</li>
</ul>
</li>
</ul>
<h2 id="Mutable-Collections"><a href="#Mutable-Collections" class="headerlink" title="Mutable Collections"></a>Mutable Collections</h2><ul>
<li><p>Array buffer: operations simply access and modify the underlying array.</p>
</li>
<li><p>List Buffer: A list buffer is like an array buffer except that it uses a linked list internally instead of an array.</p>
<ul>
<li>you plan to convert the buffer to a list once it is built up, use a list buffer instead of an array buffer.</li>
</ul>
</li>
<li><p>StringBuilder:  a string builder is useful for building strings</p>
</li>
<li><p>LinkedList: Linked lists are mutable sequences that consist of nodes that are linked with next pointer</p>
<ul>
<li>use  LinkedList.empty.isEmpty for empty list</li>
<li>linked lists are best operated on sequen- tially. In addition, linked lists make it easy to insert an element or linked list into another linked list.</li>
</ul>
</li>
<li><p>Double Linked List: The main benefit of that additional link is that it makes element removal very fast</p>
</li>
<li><p>Mutable List:</p>
<ul>
<li>A MutableList consists of a single linked list together with a pointer that refers to the terminal empty node of that list.</li>
<li>The default implementation for LinearSeq</li>
</ul>
</li>
<li><p>Queue</p>
<ul>
<li>the dequeue method will just remove the head element from the queue and return it</li>
</ul>
</li>
<li><p>Array Sequences</p>
<ul>
<li>A class for polymorphic arrays of elements that’s represented internally by an array of objects</li>
<li>Array sequences are mutable sequences of fixed size that store their elements internally in an Array[AnyRef]</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>It works exactly the same as the immutable version except that modifications happen in place</li>
</ul>
</li>
<li><p>ArrayStack</p>
<ul>
<li>ArrayStack is an alternative implementation of a mutable stack, which is backed by an Array that gets resized as needed</li>
<li>It provides fast indexing and is generally slightly more efficient for most operations than a normal mutable stack.</li>
</ul>
</li>
<li><p>HashTable</p>
<ul>
<li>A hash table stores its elements in an underlying array, placing each item at a position in the array determined by the hash code of that item.</li>
<li>As a result, the default mutable map and set types in Scala are based on hash tables.</li>
<li>HashMap, HashSet implements with hash tables in array</li>
<li>Iteration over a hash table is not guaranteed to occur in any particular order.<ul>
<li>To get a guaranteed iteration order, use a linked hash map or set instead of a regular one.</li>
<li>Iteration over such a collection is always in the same order that the elements were initially added.</li>
</ul>
</li>
</ul>
</li>
<li><p>Weak Hash Maps</p>
<ul>
<li>A weak hash map is a special kind of hash map in which the garbage collector does not follow links from the map to the keys stored in it</li>
<li>This means that a key and its associated value will disappear from the map if there is no other reference to that key</li>
<li>Weak hash maps are useful for tasks such as caching, where you want to re-use an expensive function’s result if the function is called again on the same key</li>
<li>Weak hash maps in Scala are implemented as a wrapper of an underlying Java implementation, java.util.WeakHashMap.</li>
</ul>
</li>
<li><p>Concurrent Maps</p>
<ul>
<li>A concurrent map can be accessed by several threads at once.</li>
<li> Currently, its only implementation is Java’s java.util.concurrent.ConcurrentMap</li>
</ul>
</li>
<li><p>BitSet</p>
<ul>
<li>Mutable bit sets are slightly more efficient at updating than immutable ones, because they don’t have to copy around Longs that haven’t changed.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In scala there are many fancy collections with great utilities. Here are some key notes for scala collections which did a great help to me.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="http://example.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>春江花月夜</title>
    <link href="http://example.com/2016/09/27/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C/"/>
    <id>http://example.com/2016/09/27/春江花月夜/</id>
    <published>2016-09-27T01:35:59.000Z</published>
    <updated>2017-03-05T02:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>有人说张若虚的这首诗很值得背诵下来</p>
<a id="more"></a>
<h2 id="春江花月夜"><a href="#春江花月夜" class="headerlink" title="春江花月夜"></a>春江花月夜</h2><hr>
<blockquote>
<p>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明！<br>江流宛转绕芳甸，月照花林皆似霰;<br>空里流霜不觉飞，汀上白沙看不见。<br>江天一色无纤尘，皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有人说张若虚的这首诗很值得背诵下来&lt;/p&gt;
    
    </summary>
    
    
      <category term="诗话" scheme="http://example.com/tags/%E8%AF%97%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Eight Queens Problem in Scala</title>
    <link href="http://example.com/2016/09/27/eight-queens-problem-in-scala/"/>
    <id>http://example.com/2016/09/27/eight-queens-problem-in-scala/</id>
    <published>2016-09-27T01:15:28.000Z</published>
    <updated>2017-03-05T02:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have dedicated in <strong>Programming in Scala</strong> for about 4 months. My work is busy, but I can’t give up reading more books.<br>Scala is a fabulous language, both object oriented and functional.<br>Eight qeens problem can be expressed in scala easily and concise.</p>
<a id="more"></a>

<h2 id="Eight-Queens-Problem"><a href="#Eight-Queens-Problem" class="headerlink" title="Eight Queens Problem"></a>Eight Queens Problem</h2><p>Given a standard chess-board, place eight queens such that no queen is in check from any other (a queen can check another piece if they are on the same column, row, or diagonal)</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>The problem in scala is recursively.</p>
<ol>
<li><p>First each solution is a List[(Row, Column)]</p>
<pre><code> - Each element is a coordinated, the queen position in each row
 - The coordicate for row k comes first, followed by row `k-1`, `k-2`, ... 0</code></pre>
</li>
<li><p>Use a Set[List[Row, Column]], represent all solutions</p>
</li>
<li><p>To place next <code>k+1</code> qeen, we iterate all solutions, if match the condition, yield another list</p>
</li>
</ol>
<h2 id="Lets-run-the-code"><a href="#Lets-run-the-code" class="headerlink" title="Lets run the code"></a>Lets run the code</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * the coordinates of the queen in row k comes first in each List[(ROW, Column)], followed</span></span><br><span class="line"><span class="comment">    * by k -1, k - 2, ..., 0 and so on</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param n</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">queens</span></span>(n: <span class="type">Int</span>): <span class="type">Set</span>[<span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]] = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeQueen</span></span>(k: <span class="type">Int</span>): <span class="type">Set</span>[<span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]] = &#123;</span><br><span class="line">      <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Set</span>(<span class="type">List</span>())</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">          queens &lt;- placeQueen(k - <span class="number">1</span>)</span><br><span class="line">          column &lt;- <span class="number">0</span> until n</span><br><span class="line">          queen = (k, column)</span><br><span class="line">          <span class="keyword">if</span> isSafe(queen, queens)</span><br><span class="line">        &#125; <span class="keyword">yield</span> queen :: queens</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSafe</span></span>(queen: (<span class="type">Row</span>, <span class="type">Column</span>), queens: <span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      queens.forall &#123; placedQueen =&gt;</span><br><span class="line">        placedQueen._1 != queen._1 &amp;&amp;</span><br><span class="line">          placedQueen._2 != queen._2 &amp;&amp;</span><br><span class="line">          (<span class="type">Math</span>.abs(placedQueen._1 - queen._1) !=</span><br><span class="line">            <span class="type">Math</span>.abs(placedQueen._2 - queen._2))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    placeQueen(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Github-Link"><a href="#Github-Link" class="headerlink" title="Github Link"></a>Github Link</h2><p><a href="https://github.com/lgrcyanny/ScalaPractice/blob/master/ProgrammingInScala/src/main/scala/com/chapter23/EightQueens.scala">Eight Queens</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lgrcyanny/ScalaPractice.git</span><br><span class="line"></span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line">cd ProgrammingInScala</span><br><span class="line"></span><br><span class="line">scala -cp target/programming-in-scala-1.0-SNAPSHOT.jar com.chapter23.EightQueens</span><br></pre></td></tr></table></figure>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have dedicated in &lt;strong&gt;Programming in Scala&lt;/strong&gt; for about 4 months. My work is busy, but I can’t give up reading more books.&lt;br&gt;Scala is a fabulous language, both object oriented and functional.&lt;br&gt;Eight qeens problem can be expressed in scala easily and concise.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://example.com/tags/algorithm/"/>
    
      <category term="Scala" scheme="http://example.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Neural Networks</title>
    <link href="http://example.com/2016/04/17/machine-learning-neural-networks/"/>
    <id>http://example.com/2016/04/17/machine-learning-neural-networks/</id>
    <published>2016-04-17T13:29:20.000Z</published>
    <updated>2017-08-28T14:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This week is about the mysterious Neural Networks. The courses in this week just explain the basics about Neural Networks.</p>
<h2 id="What-is-Neural-Networks"><a href="#What-is-Neural-Networks" class="headerlink" title="What is Neural Networks"></a>What is Neural Networks</h2><p>It’s a technique to train our data based on how human brains works. A simple Neural Network has:</p>
<ul>
<li>input layer</li>
<li>hidden layer</li>
<li>output layer</li>
</ul>
<p>We use Neural NetWorks to make classification and regression.<br>We use sigmoid function the map data from input layer to hidden layer then the output layer, the function is called activation function.</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/mw690/761b7938jw1f3019b35a2j21380kcn1d.jpg" alt="Neural Network"></p>
<p>In Neural Network, we add bias unit, x0, a1 to do calculate.<br>With Neural Network, we build more complex hypothesis function.<br><img src="http://ww4.sinaimg.cn/mw690/761b7938jw1f301cv572fj214o0m2teg.jpg" alt="Neural Network"></p>
<p>To play with neural network, you can try google’s open source <a href="http://playground.tensorflow.org/#activation=tanh&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.28657&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification">tensorflow</a></p>
<h2 id="Handwritten-Digital-Classification"><a href="#Handwritten-Digital-Classification" class="headerlink" title="Handwritten Digital Classification"></a>Handwritten Digital Classification</h2><p>This week’s assignment is to do multi classification on handwritten recognize.</p>
<p><strong>Do multi classification with one-vs-all logistic regression</strong><br>For handwritens in 10 lables: 0~9, we do 10 regression regression to calculate 10 group of theta. And then make 10 predications base on these 10 group of theta, choose the lable with max hypothesis value（probaility value）</p>
<p><strong>1. Cost function</strong></p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">lrCostFunction</span><span class="params">(theta, X, y, lambda)</span></span></span><br><span class="line">reg_theta = [<span class="number">0</span>;theta(<span class="number">2</span>:<span class="keyword">end</span>)];</span><br><span class="line">predictions = sigmoid(X * theta);</span><br><span class="line">J = (<span class="number">-1</span> / m) * sum((y .* <span class="built_in">log</span>(predictions) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - predictions))) + (lambda / (<span class="number">2</span> * m)) * sum(reg_theta .^ <span class="number">2</span>);</span><br><span class="line">grad = (<span class="number">1</span> / m) * (X&#x27; * (predictions - y)) + (lambda / m) * reg_theta;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>2. OneVsAll</strong><br>make 10 classifications</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[all_theta]</span> = <span class="title">oneVsAll</span><span class="params">(X, y, num_labels, lambda)</span></span></span><br><span class="line"><span class="comment">% Some useful variables</span></span><br><span class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">size</span>(X, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly</span></span><br><span class="line">all_theta = <span class="built_in">zeros</span>(num_labels, n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Add ones to the X data matrix</span></span><br><span class="line">X = [<span class="built_in">ones</span>(m, <span class="number">1</span>) X];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Note: For this assignment, we recommend using fmincg to optimize the cost</span></span><br><span class="line"><span class="comment">%       function. It is okay to use a for-loop (for c = 1:num_labels) to</span></span><br><span class="line"><span class="comment">%       loop over the different classes.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%       fmincg works similarly to fminunc, but is more efficient when we</span></span><br><span class="line"><span class="comment">%       are dealing with large number of parameters.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:num_labels</span><br><span class="line">    initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    options = optimset(<span class="string">&#x27;GradObj&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;MaxIter&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="comment">% theta is a column vector</span></span><br><span class="line">    <span class="comment">% Run fmincg to obtain the optimal theta</span></span><br><span class="line">    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == <span class="built_in">i</span>), lambda)), ...</span><br><span class="line">                    initial_theta, options);</span><br><span class="line">    all_theta(<span class="built_in">i</span>, :) = theta&#x27;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>3. PredictOneVsAll</strong></p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span> = <span class="title">predictOneVsAll</span><span class="params">(all_theta, X)</span></span></span><br><span class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</span><br><span class="line">num_labels = <span class="built_in">size</span>(all_theta, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly</span></span><br><span class="line">p = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Add ones to the X data matrix</span></span><br><span class="line">X = [<span class="built_in">ones</span>(m, <span class="number">1</span>) X];</span><br><span class="line">predictions = X * all_theta&#x27;;</span><br><span class="line"><span class="comment">% calculate max of each row</span></span><br><span class="line">[max_predictions, p] = <span class="built_in">max</span>(predictions, [], <span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The logistic has great accurracy, about 95% in this case, but neural network will have higher accuracy, about 97%.</p>
<h2 id="Neural-Forward-Propagation-algorithm"><a href="#Neural-Forward-Propagation-algorithm" class="headerlink" title="Neural Forward Propagation algorithm"></a>Neural Forward Propagation algorithm</h2><p>In the assignment, it build hypothesis function with 3 layers neural network.<br>The predications implementation</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span> = <span class="title">predict</span><span class="params">(Theta1, Theta2, X)</span></span></span><br><span class="line"><span class="comment">%PREDICT Predict the label of an input given a trained neural network</span></span><br><span class="line"><span class="comment">%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the</span></span><br><span class="line"><span class="comment">%   trained weights of a neural network (Theta1, Theta2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Useful values</span></span><br><span class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</span><br><span class="line">num_labels = <span class="built_in">size</span>(Theta2, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly </span></span><br><span class="line">p = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></span><br><span class="line"><span class="comment">% Instructions: Complete the following code to make predictions using</span></span><br><span class="line"><span class="comment">%               your learned neural network. You should set p to a </span></span><br><span class="line"><span class="comment">%               vector containing labels between 1 to num_labels.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Hint: The max function might come in useful. In particular, the max</span></span><br><span class="line"><span class="comment">%       function can also return the index of the max element, for more</span></span><br><span class="line"><span class="comment">%       information see &#x27;help max&#x27;. If your examples are in rows, then, you</span></span><br><span class="line"><span class="comment">%       can use max(A, [], 2) to obtain the max for each row.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Theta1 is 25 * 401, X is 5000 * 401</span></span><br><span class="line">X = [<span class="built_in">ones</span>(m, <span class="number">1</span>) X];</span><br><span class="line"><span class="comment">% z2 is 5000 * 25</span></span><br><span class="line">z2 = X * Theta1&#x27;;</span><br><span class="line">a2 = sigmoid(z2);</span><br><span class="line"><span class="comment">% a2 with bias unit is 5000 * 26</span></span><br><span class="line">a2 = [<span class="built_in">ones</span>(m, <span class="number">1</span>) a2];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Theta2 is 10 * 26</span></span><br><span class="line"><span class="comment">% z3 is 5000 * 10</span></span><br><span class="line">z3 = a2 * Theta2&#x27;;</span><br><span class="line">a3 = sigmoid(z3);</span><br><span class="line">[max_valid, p] = <span class="built_in">max</span>(a3, [], <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% =========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>My question is:</p>
<ul>
<li>how to train the Theta1, Theta2</li>
<li>how to decide how many units in hidden layer<br>In the later course, I think NG will explain it. Next week, I will learn backpropagation algorithm.</li>
</ul>
<h2 id="My-assignment"><a href="#My-assignment" class="headerlink" title="My assignment"></a>My assignment</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments">Week Assignments</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week is about the mysterious Neural Networks. The courses in this week just explain the basics about Neural Networks.&lt;/p&gt;
&lt;h2 id=&quot;What-is-Neural-Networks&quot;&gt;&lt;a href=&quot;#What-is-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;What is Neural Networks&quot;&gt;&lt;/a&gt;What is Neural Networks&lt;/h2&gt;&lt;p&gt;It’s a technique to train our data based on how human brains works. A simple Neural Network has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input layer&lt;/li&gt;
&lt;li&gt;hidden layer&lt;/li&gt;
&lt;li&gt;output layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use Neural NetWorks to make classification and regression.&lt;br&gt;We use sigmoid function the map data from input layer to hidden layer then the output layer, the function is called activation function.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://example.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Linear Regression</title>
    <link href="http://example.com/2016/04/04/machine-learning-linear-regression/"/>
    <id>http://example.com/2016/04/04/machine-learning-linear-regression/</id>
    <published>2016-04-04T07:55:31.000Z</published>
    <updated>2017-03-05T02:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been learning the coursera Machine Learning Course by Andrew Ng for two weeks now. Machine Learning is fun and different. For the coursera assignment1 of linear regression, I want to share something.</p>
<a id="more"></a>

<h2 id="Using-matlab"><a href="#Using-matlab" class="headerlink" title="Using matlab"></a>Using matlab</h2><p>I think matlab is better than octave, please use coursera account. <a href="https://www.coursera.org/learn/machine-learning/supplement/rANSM/installing-matlab">Install matlab</a></p>
<h2 id="Octave-Install"><a href="#Octave-Install" class="headerlink" title="Octave Install"></a>Octave Install</h2><p>The course use Octave/Matlab for programming practice. I learned octave basics in two days. I don’t have too much time, can just doing these homework in weekends. For Octavel installed on mac, I encounter some problems and solved it. Now octave is 4.2.0, I think ocatve is better now.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install octave</span><br></pre></td></tr></table></figure>
<p>if you encounter some problem, you can solve it as follows:</p>
<ul>
<li>brew update &amp;&amp; brew upgrade</li>
<li>brew tap –repair</li>
<li>brew install octave</li>
<li>install xserver(seems no need to install)<ul>
<li><a href="http://www.xquartz.org/">http://www.xquartz.org/</a></li>
</ul>
</li>
<li>font can’t find when plot<ul>
<li>export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig</li>
</ul>
</li>
<li>can’t plot unknown or ambiguous terminal type; type just ‘set terminal’ for a list<ul>
<li>brew uninstall gnuplot</li>
<li>download and install aquaterm: <a href="https://sourceforge.net/projects/aquaterm/?source=typ_redirect">https://sourceforge.net/projects/aquaterm/?source=typ_redirect</a></li>
<li>brew install gnuplot –with-aquaterm –with-qt4</li>
</ul>
</li>
<li>add start config to /usr/local/share/octave/site/m/startup/octaverc<ul>
<li>PS1(‘&gt;&gt; ‘)</li>
</ul>
</li>
</ul>
<h2 id="Gradient-Descent-Algorithm"><a href="#Gradient-Descent-Algorithm" class="headerlink" title="Gradient Descent Algorithm"></a>Gradient Descent Algorithm</h2><p>Implementing gradient desenct algorithm in vectorization style was more efficient than iteration algorithm. Here is my implementation:<br>No for loop looks elegant.</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta, J_history]</span> = <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span></span></span><br><span class="line"><span class="comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span></span><br><span class="line"><span class="comment">%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by</span></span><br><span class="line"><span class="comment">%   taking num_iters gradient steps with learning rate alpha</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize some useful values</span></span><br><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line">J_history = <span class="built_in">zeros</span>(num_iters, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</span><br><span class="line"></span><br><span class="line">    <span class="comment">% ====================== YOUR CODE HERE ======================</span></span><br><span class="line">    <span class="comment">% Instructions: Perform a single gradient step on the parameter vector</span></span><br><span class="line">    <span class="comment">%               theta.</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Hint: While debugging, it can be useful to print out the values</span></span><br><span class="line">    <span class="comment">%       of the cost function (computeCost) and gradient here.</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    predications = X * theta;</span><br><span class="line">    errors = predications - y; <span class="comment">% m by 1 vector</span></span><br><span class="line">    <span class="comment">% sum_delta = (alpha / m) * sum(errors .* X, 1); % sum by column, which is 1 by n + 1 matrix</span></span><br><span class="line">    <span class="comment">% transpose X, no need sum(errors .* X, 1) here</span></span><br><span class="line">    sum_delta = (alpha / m) .* (X&#x27; * errors);</span><br><span class="line">    theta = theta - sum_delta;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% ============================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Save the cost J in every iteration</span></span><br><span class="line">    J_history(iter) = computeCost(X, y, theta);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Another implementation by my wwzyhao</strong><br>[by wwzyhao]</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta, J_history]</span> = <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span></span></span><br><span class="line"><span class="comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span></span><br><span class="line"><span class="comment">%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by</span></span><br><span class="line"><span class="comment">%   taking num_iters gradient steps with learning rate alpha</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize some useful values</span></span><br><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line">J_history = <span class="built_in">zeros</span>(num_iters, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</span><br><span class="line"></span><br><span class="line">    delta = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">2</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:m</span><br><span class="line">        x = (X(<span class="built_in">j</span>,:))&#x27;;</span><br><span class="line">        delta = delta + (<span class="number">1</span> / m) * (theta&#x27; * x - y(<span class="built_in">j</span>)) * x;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    theta = theta - alpha * delta;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% ============================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Save the cost J in every iteration</span></span><br><span class="line">    J_history(iter) = computeCost(X, y, theta);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>Not better than me! haha~</p>
<h2 id="My-assignments-on-github"><a href="#My-assignments-on-github" class="headerlink" title="My assignments on github"></a>My assignments on github</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments/ex1/ex1">Assignments1</a><br>For submition errors, please refer to<a href="https://learner.coursera.help/hc/en-us/community/posts/204693179-linear-regression-submit-error">Jacob Middag</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been learning the coursera Machine Learning Course by Andrew Ng for two weeks now. Machine Learning is fun and different. For the coursera assignment1 of linear regression, I want to share something.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://example.com/tags/machine-learning/"/>
    
  </entry>
  
</feed>
